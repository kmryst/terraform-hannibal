name: Deploy NestJS Hannibal (Fast)

env:
  AWS_ACCOUNT_ID: "258632448142"
  PROJECT_NAME: "nestjs-hannibal-3"
  AWS_REGION: "ap-northeast-1"

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - run: npm ci
      - run: npm test
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      - run: npm ci
        working-directory: ./client

  deploy:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      s3_bucket_name: ${{ steps.outputs.outputs.s3_bucket_name }}
      cloudfront_distribution_id: ${{ steps.outputs.outputs.cloudfront_distribution_id || 'null' }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            terraform/backend/.terraform
            terraform/frontend/.terraform
          key: ${{ runner.os }}-terraform-v2-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-v2-
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.1
        env:
          TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
      - run: sudo apt-get update && sudo apt-get install -y jq

      # Assume CICD Role
      - name: Assume CICD Role
        run: |
          CREDS=$(aws sts assume-role --role-arn arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/HannibalCICDRole-Dev --role-session-name deploy)
          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      # Deploy Backend Infrastructure
      - name: Deploy Backend
        run: |
          terraform init -input=false
          terraform apply -auto-approve -var="client_url_for_cors=https://hamilcar-hannibal.click" -var="environment=dev"
          terraform output -json > ../tf_outputs_backend.json
        working-directory: ./terraform/backend

      # Deploy Frontend Infrastructure
      - name: Deploy Frontend Infrastructure
        run: |
          terraform init -input=false
          terraform apply -auto-approve -var="api_alb_dns_name=$(jq -r '.alb_dns_name.value' ../tf_outputs_backend.json)" -var="environment=dev" -var="enable_cloudfront=true"
          terraform output -json > tf_outputs.json
        working-directory: ./terraform/frontend

      # Get Outputs
      - name: Get Outputs
        id: outputs
        run: |
          echo "s3_bucket_name=$(jq -r '.s3_bucket_name.value' ./terraform/frontend/tf_outputs.json)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(jq -r '.cloudfront_distribution_id.value' ./terraform/frontend/tf_outputs.json)" >> $GITHUB_OUTPUT

      # Build and Deploy Frontend
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      - run: npm ci
        working-directory: ./client
      - run: npm run build
        working-directory: ./client
      - name: Deploy to S3
        run: aws s3 sync ./client/dist "s3://${{ steps.outputs.outputs.s3_bucket_name }}" --delete
      - name: Invalidate CloudFront
        if: steps.outputs.outputs.cloudfront_distribution_id != 'null' && steps.outputs.outputs.cloudfront_distribution_id != ''
        run: aws cloudfront create-invalidation --distribution-id "${{ steps.outputs.outputs.cloudfront_distribution_id }}" --paths "/*"

      # Build and Deploy Backend
      - uses: aws-actions/amazon-ecr-login@v2
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: 258632448142.dkr.ecr.ap-northeast-1.amazonaws.com/nestjs-hannibal-3:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Deploy with CodeDeploy Blue/Green
        run: |
          # 新しいコンテナイメージ
          NEW_IMAGE="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.PROJECT_NAME }}:${{ github.sha }}"
          
          # 現在のタスク定義を取得してファイルに保存
          aws ecs describe-task-definition --task-definition ${{ env.PROJECT_NAME }}-api-task --query 'taskDefinition' > current_task_def.json
          
          # 新しいタスク定義を作成（イメージのみ更新）
          jq --arg IMAGE "$NEW_IMAGE" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' current_task_def.json > new_task_def.json
          
          # 新しいタスク定義を登録
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new_task_def.json --query 'taskDefinition.taskDefinitionArn' --output text)
          
          # CodeDeploy Blue/Green deployment実行
          cat > appspec.json << EOF
          {
            "version": "0.0",
            "Resources": [
              {
                "TargetService": {
                  "Type": "AWS::ECS::Service",
                  "Properties": {
                    "TaskDefinition": "$NEW_TASK_DEF_ARN",
                    "LoadBalancerInfo": {
                      "ContainerName": "${{ env.PROJECT_NAME }}-container",
                      "ContainerPort": 3000
                    },
                    "PlatformVersion": "LATEST"
                  }
                }
              }
            ],
            "Hooks": [
              {
                "BeforeInstall": "echo 'Preparing for deployment'"
              },
              {
                "AfterInstall": "echo 'New task definition registered'"
              },
              {
                "AfterAllowTestTraffic": "echo 'Test traffic validation complete'"
              },
              {
                "BeforeAllowTraffic": "echo 'Switching to production traffic'"
              },
              {
                "AfterAllowTraffic": "echo 'Deployment completed successfully'"
              }
            ]
          }
          EOF
          
          # CodeDeploy デプロイメント実行
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${{ env.PROJECT_NAME }}-codedeploy-app \
            --deployment-group-name ${{ env.PROJECT_NAME }}-deployment-group \
            --revision '{"revisionType":"AppSpecContent","appSpecContent":{"content":"'$(cat appspec.json | jq -c . | sed 's/"/\\"/g')'"}}'  \
            --query 'deploymentId' --output text)
          
          echo "🚀 CodeDeploy Blue/Green deployment initiated!"
          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "Task Definition: $NEW_TASK_DEF_ARN"
          
          # デプロイメント状況監視
          echo "⏳ Monitoring deployment progress..."
          while true; do
            STATUS=$(aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --query 'deploymentInfo.status' --output text)
            echo "Status: $STATUS"
            if [ "$STATUS" = "Succeeded" ]; then
              echo "🎉 Deployment completed successfully!"
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Stopped" ]; then
              echo "❌ Deployment failed with status: $STATUS"
              aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --query 'deploymentInfo.errorInformation'
              exit 1
            fi
            sleep 30
          done