AWSTemplateFormatVersion: '2010-09-09'
Description: Static React/Vite SPA hosting with S3 (private) + CloudFront (OAC) + API routing

Parameters:
  FrontendBucketName:
    Type: String
    Description: S3 bucket name for frontend hosting
    Default: nestjs-hannibal-3-frontend-2025
  ApiOriginDomainName: 
    Type: String
    Description: "APIバックエンド（EC2またはALB）のDNS名（例: ec2-xxx.ap-northeast-1.compute.amazonaws.com）"
    Default: ec2-54-250-101-149.ap-northeast-1.compute.amazonaws.com

Resources:
  FrontendS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref FrontendBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  FrontendS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${FrontendS3Bucket.Arn}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${FrontendCloudFrontDistribution}'

  FrontendOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${FrontendBucketName}-oac'
        Description: OAC for CloudFront to access private S3
        SigningProtocol: sigv4
        SigningBehavior: always
        OriginAccessControlOriginType: s3

  FrontendCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendS3Bucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !Ref FrontendOAC
          - Id: ApiOrigin
            DomainName: !Ref ApiOriginDomainName
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # Managed-SecurityHeadersPolicy
        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            CachedMethods: [GET, HEAD, OPTIONS]
            Compress: true
            ForwardedValues:
              QueryString: true
              Headers:
                - Authorization
                - Content-Type
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html

Outputs:
  CloudFrontDomain:
    Description: CloudFront Distribution Domain
    Value: !GetAtt FrontendCloudFrontDistribution.DomainName
  S3BucketName:
    Description: S3 bucket name
    Value: !Ref FrontendS3Bucket
