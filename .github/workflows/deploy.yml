name: Deploy NestJS Hannibal App

on:
  pull_request:
    branches: [ec2s3cf] # トリガーブランチを ec2s3cf に設定
  push:
    branches: [ec2s3cf] # トリガーブランチを ec2s3cf に設定

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # バックエンドのテスト
      - name: Setup Node.js for Backend
        uses: actions/setup-node@v3
        with:
          node-version: '16' # バックエンドは Node.js 16 を使用
          cache: 'npm'

      - name: Install Backend Dependencies
        run: npm ci

      - name: Run Backend Tests
        run: npm test

      # フロントエンドのテスト
      - name: Setup Node.js for Frontend
        uses: actions/setup-node@v3
        with:
          node-version: '20' # フロントエンドは Node.js 20 を使用
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install Frontend Dependencies
        run: cd client && npm ci

      - name: Run Frontend Tests
        # (もしテストコマンドがあれば追記してください。例: npm run test)
        run: echo "Frontend tests would run here" # テストコマンドがない場合は削除または適切なコマンドに置き換え

  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/ec2s3cf' # デプロイ対象ブランチを ec2s3cf に設定
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # AWSの認証情報を設定
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      # Terraformをセットアップ
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0 # Terraformのバージョン指定 (必要に応じて変更)

      # Terraformを初期化
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform # terraformディレクトリで実行

      # Terraformプランを表示 (オプション)
      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform # terraformディレクトリで実行

      # Terraformを適用（インフラをデプロイ）
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform # terraformディレクトリで実行

      # フロントエンドのビルド
      - name: Setup Node.js for Frontend
        uses: actions/setup-node@v3
        with:
          node-version: '20' # フロントエンドは Node.js 20 を使用
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: ./client # client ディレクトリで実行

      - name: Build Frontend
        run: npm run build
        working-directory: ./client # client ディレクトリで実行

      # --- ここから修正 ---
      # TerraformアウトプットからS3バケット名を取得し、最初の行のみを使用
      - name: Get S3 bucket name
        id: get_bucket_name
        run: |
          # terraform output の結果から最初の行だけを取得する
          bucket_name=$(terraform output -raw s3_bucket_name | head -n 1)
          echo "Extracted bucket name: ${bucket_name}" # デバッグ用ログ
          # 改行コードが含まれている可能性を考慮して削除
          bucket_name_cleaned=$(echo $bucket_name | tr -d '\n' | tr -d '\r')
          echo "Cleaned bucket name: ${bucket_name_cleaned}" # デバッグ用ログ
          echo "S3_BUCKET_NAME=${bucket_name_cleaned}" >> $GITHUB_ENV
        working-directory: ./terraform # terraformディレクトリで実行

      # S3へのデプロイ（フロントエンド）
      - name: Deploy to S3
        run: |
          echo "Deploying to bucket: ${{ env.S3_BUCKET_NAME }}"
          aws s3 sync ./client/dist s3://${{ env.S3_BUCKET_NAME }} --delete

      # TerraformアウトプットからCloudFront Distribution IDを取得し、最初の行のみを使用
      - name: Get CloudFront Distribution ID
        id: get_distribution_id
        run: |
          # terraform output の結果から最初の行だけを取得する
          distribution_id=$(terraform output -raw cloudfront_distribution_id | head -n 1)
          echo "Extracted distribution ID: ${distribution_id}" # デバッグ用ログ
          # 改行コードが含まれている可能性を考慮して削除
          distribution_id_cleaned=$(echo $distribution_id | tr -d '\n' | tr -d '\r')
          echo "Cleaned distribution ID: ${distribution_id_cleaned}" # デバッグ用ログ
          echo "CLOUDFRONT_DISTRIBUTION_ID=${distribution_id_cleaned}" >> $GITHUB_ENV
        working-directory: ./terraform # terraformディレクトリで実行

      # CloudFrontキャッシュの無効化
      - name: Invalidate CloudFront Cache
        run: |
          echo "Invalidating CloudFront cache for distribution: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
          aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
      # --- 修正ここまで ---

      # バックエンドのデプロイ（EC2）
      - name: Deploy Backend to EC2 via SSM
        run: |
          # EC2インスタンスIDを取得
          # タグの名前が Terraform ファイルと一致していることを確認してください
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=nestjs-hannibal-backend" --query "Reservations[].Instances[?State.Name=='running'].InstanceId" --output text)

          if [ -z "$INSTANCE_ID" ]; then
            echo "EC2 instance not found or not running."
            exit 1
          fi

          echo "Deploying to EC2 instance: $INSTANCE_ID"

          # SSMを使用してコマンドを実行
          # リポジトリURLを実際のURLに置き換えてください
          # git clone コマンドにブランチを指定 (-b ec2s3cf)
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters commands='[
              "cd /home/ec2-user",
              "rm -rf nestjs-hannibal-3",
              "git clone -b ec2s3cf https://github.com/yourusername/nestjs-hannibal-3.git",
              "cd nestjs-hannibal-3",
              "sudo npm install -g npm@latest",
              "npm ci --legacy-peer-deps",
              "npm run build",
              "sudo pm2 stop all || true",
              "sudo pm2 delete all || true",
              "sudo pm2 start dist/main.js --name nestjs-api",
              "sudo pm2 save"
            ]' \
            --timeout-seconds 600 # タイムアウトを延長 (必要に応じて調整)

