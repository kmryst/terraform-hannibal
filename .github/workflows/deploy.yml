# 🚨 重要: このワークフローを実行する前に以下のリソースを手動作成してください
#
# 1. ECRリポジトリ
# aws ecr create-repository --repository-name nestjs-hannibal-3 --region ap-northeast-1
#
# 2. S3バケット（フロントエンド用）
# aws s3 mb s3://nestjs-hannibal-3-frontend --region ap-northeast-1
#
# 3. CloudFront OAC
# aws cloudfront create-origin-access-control --name nestjs-hannibal-3-oac --origin-access-control-origin-type s3 --signing-behavior always --signing-protocol sigv4 --region us-east-1
#
# 4. カスタムIAMポリシー適用
# cd terraform/backend && terraform apply -target="aws_iam_policy.hannibal_terraform_policy" -target="aws_iam_user_policy_attachment.hannibal_terraform_policy" -auto-approve
#
# 理由: 権限エラー回避、CI/CD安定性向上、実行時間短縮



# C:\code\javascript\nestjs-hannibal-3\.github\workflows\deploy.yml

name: Deploy NestJS Hannibal App

# on: # ワークフローのトリガーを定義
#   pull_request:
#     branches: [feature/github-actions]
#   push:
#     branches: [feature/github-actions]

on:
  workflow_dispatch:

jobs:
  test:
    # (変更なし)
    runs-on: ubuntu-latest # このジョブを実行する仮想マシン
    steps: # step: 手順
      - name: Checkout code
        uses: actions/checkout@v4 # GitHubが提供する公式アクションで、リポジトリのコードをチェックアウト（取得）します
      - name: Setup Node.js for Backend
        uses: actions/setup-node@v3 # GitHubが提供する公式アクションで、指定したバージョンのNode.jsをインストールします
        with: # usesで指定したアクションに渡すパラメータ（設定値）を定義するキーワードです
          node-version: '20'
          cache: 'npm' # npmのキャッシュを有効にすることで、依存関係のダウンロードを高速化します
          cache-dependency-path: package-lock.json
      - name: Install Backend Dependencies
        run: npm ci # clean install
      - name: Run Backend Tests
        run: npm test
      - name: Setup Node.js for Frontend
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: ./client
      - name: Run Frontend Tests
        run: echo "Frontend tests would run here (e.g., npm run test)"
        # e.g. ラテン語 "exempli gratia" 例えば
        working-directory: ./client

  deploy:
    # (変更なし)
    needs: test # testが成功した場合のみ実行される
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    # github はワークフロー実行の状況（コンテキスト）を表すオブジェクトで、イベントやブランチなどの情報を提供します
    # ブランチの参照は refs/heads/<ブランチ名> という形式で表現されます
    runs-on: ubuntu-latest
    outputs: # このジョブで生成した値を他のジョブで利用できるようにする(今は使ってない)
      s3_bucket_name: ${{ steps.get_terraform_outputs.outputs.s3_bucket_name }}
      cloudfront_distribution_id: ${{ steps.get_terraform_outputs.outputs.cloudfront_distribution_id }}
      cloudfront_domain_name: ${{ steps.get_terraform_outputs.outputs.cloudfront_domain_name }}

    steps:
      # - name: から始まる各ブロックが step です
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.0
      - name: Install jq # JSONデータをquery(検索、加工)するためのコマンドラインツール
        run: sudo apt-get update && sudo apt-get install -y jq
        # apt-get は「Advanced Package Tool」の略で、Debian系Linux（Ubuntuなど）で使われるパッケージ管理コマンドです

      # 既存リソースの削除（リソース競合エラー回避）
      # 📝 注意: ECRリポジトリは手動作成済みのため削除しません
      - name: Clean up existing AWS resources
        run: |
          echo "Cleaning up existing AWS resources to avoid conflicts..."

          # 📝 ECRリポジトリは手動作成済みのため削除をスキップ
          # 理由: 権限エラー回避、CI/CD安定性向上、実行時間短縮
          echo "Skipping ECR deletion - using pre-created repository"

          # ECSサービス削除
          aws ecs update-service --cluster nestjs-hannibal-3-cluster --service nestjs-hannibal-3-api-service --desired-count 0 --region ap-northeast-1 2>/dev/null || echo "ECS service not found"
          sleep 10
          aws ecs delete-service --cluster nestjs-hannibal-3-cluster --service nestjs-hannibal-3-api-service --force --region ap-northeast-1 2>/dev/null || echo "ECS service not found"

          # ECSクラスタ削除
          aws ecs delete-cluster --cluster nestjs-hannibal-3-cluster --region ap-northeast-1 2>/dev/null || echo "ECS cluster not found"

          # ALB削除
          ALB_ARN=$(aws elbv2 describe-load-balancers --names nestjs-hannibal-3-alb --region ap-northeast-1 --query 'LoadBalancers[0].LoadBalancerArn' --output text 2>/dev/null || echo "None")
          if [ "$ALB_ARN" != "None" ] && [ "$ALB_ARN" != "null" ]; then
            aws elbv2 delete-load-balancer --load-balancer-arn "$ALB_ARN" --region ap-northeast-1
            echo "Waiting for ALB deletion..."
            sleep 60
          fi

          # ターゲットグループ削除
          TG_ARN=$(aws elbv2 describe-target-groups --names nestjs-hannibal-3-tg --region ap-northeast-1 --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null || echo "None")
          if [ "$TG_ARN" != "None" ] && [ "$TG_ARN" != "null" ]; then
            aws elbv2 delete-target-group --target-group-arn "$TG_ARN" --region ap-northeast-1
          fi

          # セキュリティグループ削除（ALB削除後に実行）
          echo "Waiting for security group dependencies to clear..."
          sleep 30

          SG_ECS_ID=$(aws ec2 describe-security-groups --group-names nestjs-hannibal-3-ecs-service-sg --region ap-northeast-1 --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "None")
          if [ "$SG_ECS_ID" != "None" ] && [ "$SG_ECS_ID" != "null" ]; then
            aws ec2 delete-security-group --group-id "$SG_ECS_ID" --region ap-northeast-1 2>/dev/null || echo "Security group deletion failed (dependencies may exist)"
          fi

          SG_ALB_ID=$(aws ec2 describe-security-groups --group-names nestjs-hannibal-3-alb-sg --region ap-northeast-1 --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "None")
          if [ "$SG_ALB_ID" != "None" ] && [ "$SG_ALB_ID" != "null" ]; then
            aws ec2 delete-security-group --group-id "$SG_ALB_ID" --region ap-northeast-1 2>/dev/null || echo "Security group deletion failed (dependencies may exist)"
          fi

          # IAMロール削除
          aws iam detach-role-policy --role-name nestjs-hannibal-3-ecs-task-execution-role --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy 2>/dev/null || echo "IAM role policy not found"
          aws iam delete-role --role-name nestjs-hannibal-3-ecs-task-execution-role 2>/dev/null || echo "IAM role not found"

          # 監視リソース削除（CloudWatch Alarms, SNS Topic, Dashboard）
          echo "Cleaning up monitoring resources..."
          
          # CloudWatch Alarms削除
          aws cloudwatch delete-alarms --alarm-names \
            "nestjs-hannibal-3-ecs-cpu-high" \
            "nestjs-hannibal-3-ecs-memory-high" \
            "nestjs-hannibal-3-ecs-task-stopped" \
            "nestjs-hannibal-3-rds-cpu-high" \
            "nestjs-hannibal-3-rds-connections-high" \
            "nestjs-hannibal-3-alb-response-time-high" \
            "nestjs-hannibal-3-alb-5xx-error-rate-high" \
            --region ap-northeast-1 2>/dev/null || echo "Alarms not found"
          
          # CloudWatch Dashboard削除
          aws cloudwatch delete-dashboards --dashboard-names "hannibal-system-dashboard" --region ap-northeast-1 2>/dev/null || echo "Dashboard not found"
          
          # SNS Topic削除
          SNS_TOPIC_ARN=$(aws sns list-topics --region ap-northeast-1 --query 'Topics[?contains(TopicArn, `nestjs-hannibal-3-alerts`)].TopicArn' --output text 2>/dev/null || echo "None")
          if [ "$SNS_TOPIC_ARN" != "None" ] && [ "$SNS_TOPIC_ARN" != "" ]; then
            aws sns delete-topic --topic-arn "$SNS_TOPIC_ARN" --region ap-northeast-1 2>/dev/null || echo "SNS topic deletion failed"
          fi

          # CloudWatchログループ削除
          aws logs delete-log-group --log-group-name /ecs/nestjs-hannibal-3-api-task --region ap-northeast-1 2>/dev/null || echo "Log group not found"

          # RDS削除（セキュリティグループ削除前に実行）
          aws rds delete-db-instance --db-instance-identifier nestjs-hannibal-3-postgres --skip-final-snapshot --region ap-northeast-1 2>/dev/null || echo "RDS instance not found"
          echo "Waiting for RDS deletion..."
          sleep 60

          # RDSサブネットグループ削除
          aws rds delete-db-subnet-group --db-subnet-group-name nestjs-hannibal-3-db-subnet-group --region ap-northeast-1 2>/dev/null || echo "DB subnet group not found"

          # RDSセキュリティグループ削除
          SG_RDS_ID=$(aws ec2 describe-security-groups --group-names nestjs-hannibal-3-rds-sg --region ap-northeast-1 --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "None")
          if [ "$SG_RDS_ID" != "None" ] && [ "$SG_RDS_ID" != "null" ]; then
            aws ec2 delete-security-group --group-id "$SG_RDS_ID" --region ap-northeast-1 2>/dev/null || echo "RDS security group deletion failed"
          fi

          echo "Cleanup completed (errors are expected if resources don't exist)"
        continue-on-error: true
      - name: Terraform Init (Backend)
        id: init-backend
        run: yes | terraform init
        working-directory: ./terraform/backend
      - name: Terraform Plan (Backend)
        id: plan-backend
        run: terraform plan -no-color -var="client_url_for_cors="
        # -no-color は、Terraformの出力を「色なし（白黒）」にしてログを見やすくするオプションです
        # -var="client_url_for_cors="  terraform/backend/main.ts の変数 client_url_for_cors に空文字列を渡している指定です。これにより、CORS設定用のクライアントURLが一時的に未設定の状態で terraform plan を実行できます
        working-directory: ./terraform/backend
        continue-on-error: true
      - name: Terraform Apply (Backend)
        id: apply-backend
        run:
          | # パイプ記号を付けることで、その下にインデントして複数行のシェルコマンドを記述できます
          terraform apply -auto-approve -no-color -var="client_url_for_cors="
          terraform output -json > ../tf_outputs_backend.json
        # ファイルに保存しておくことで「別ディレクトリのTerraform」や「jqコマンド」などでも値を使い回せる
        working-directory: ./terraform/backend

      - name: Terraform Init (Frontend)
        id: init-frontend
        run: yes | terraform init
        working-directory: ./terraform/frontend
      - name: Terraform Plan (Frontend)
        id: plan-frontend

        run: terraform plan -no-color -var="api_alb_dns_name=$(jq -r '.alb_dns_name.value' ../tf_outputs_backend.json)"
        # $()　コマンド置換、コマンドの実行結果が埋め込まれる
        # jq -r　--raw-output 抽出した値を「ダブルクォートなしの生の文字列（raw）」で出力します
        # バックエンド（API）の ALB のDNS名をフロントエンドのTerraform設定に動的に反映させることができます
        # ../tf_outputs_backend.json: GitHub サーバ上に作られる一時ファイル の中の .alb_dns_name キーの.value にアクセスする

        working-directory: ./terraform/frontend
        continue-on-error: true
      - name: 🚀 Deploy Frontend Infrastructure
        run: |
          echo "🚀 Deploying frontend resources..."
          yes | terraform init
          # CloudFrontも含めてデプロイするため、enable_cloudfront=trueでapply
          terraform apply -auto-approve -var="api_alb_dns_name=$(jq -r '.alb_dns_name.value' ../tf_outputs_backend.json)" -var="enable_cloudfront=true"
          echo "✅ Frontend infrastructure deployed"
        working-directory: ./terraform/frontend
      - name: Get Terraform Outputs (Frontend)
        id: get_terraform_outputs
        # shell
        run: |
          echo "Retrieving Terraform outputs (frontend)..."
          cd ./terraform/frontend
          terraform output -json > tf_outputs.json
          echo "--- Terraform Outputs (JSON) ---"
          cat tf_outputs.json
          echo "--------------------------------"

          cd ../..
          # 2階層上に移動する

          echo "s3_bucket_name=$(jq -r '.s3_bucket_name.value' ./terraform/frontend/tf_outputs.json)" >> $GITHUB_OUTPUT
          # echo で文字列を作り、>> で$GITHUB_OUTPUTに追記する
          # $GITHUB_OUTPUT は「GitHub Actionsの同じジョブ内の他のステップで参照するためのファイル」です
          # ${{ steps.get_terraform_outputs.outputs.s3_bucket_name }} これが使えるようになる 

          echo "cloudfront_domain_name=$(jq -r '.cloudfront_domain_name.value' ./terraform/frontend/tf_outputs.json)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(jq -r '.cloudfront_distribution_id.value' ./terraform/frontend/tf_outputs.json)" >> $GITHUB_OUTPUT

          # 古いやり方 不要
          # echo "::set-output name=s3_bucket_name::$(jq -r '.s3_bucket_name.value' ./terraform/frontend/tf_outputs.json)"
          # echo "::set-output name=cloudfront_domain_name::$(jq -r '.cloudfront_domain_name.value' ./terraform/frontend/tf_outputs.json)"
          # echo "::set-output name=cloudfront_distribution_id::$(jq -r '.cloudfront_distribution_id.value' ./terraform/frontend/tf_outputs.json)"

        working-directory: ./
        # この step の開始時点で、ルートディレクトリで開始する

      - name: Update CLIENT_URL in .env
        run: |
          sed -i "s|^CLIENT_URL=.*$|CLIENT_URL=https://hamilcar-hannibal.click|" .env

      - name: Update VITE_GRAPHQL_ENDPOINT in client/.env.production
        run: |
          sed -i "s|^VITE_GRAPHQL_ENDPOINT=.*$|VITE_GRAPHQL_ENDPOINT=https://hamilcar-hannibal.click/api/graphql|" client/.env.production

      # CloudFrontドメイン名をCORS用にbackendへ再適用
      - name: Terraform Apply (Backend, CORS Update)
        id: apply-backend-cors
        run: terraform apply -auto-approve -no-color -var="client_url_for_cors=https://hamilcar-hannibal.click"
        working-directory: ./terraform/backend
      - name: Setup Node.js for Frontend Build
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      - name: Install Frontend Dependencies for Build
        run: npm ci
        working-directory: ./client
      - name: Build Frontend
        run: npm run build
        working-directory: ./client
      - name: Deploy Frontend to S3
        run: |
          # (内容は変更なし)
          S3_BUCKET="${{ steps.get_terraform_outputs.outputs.s3_bucket_name }}"

          if [ -z "$S3_BUCKET" ]; then echo "::error::S3 bucket name not found."; exit 1; fi 
          # -z zero length
          # if が true なら then を実行する
          # ::error:: ::warning:: ::notice:: GitHub Actions独自のログ注釈機能です
          # exit 1 異常終了

          echo "Deploying frontend to bucket: $S3_BUCKET"
          aws s3 sync ./client/dist "s3://$S3_BUCKET" --delete
          # --delete S3バケット側にあってローカルに存在しないファイルは自動的に削除されます

      - name: Invalidate CloudFront Cache
        run: |
          CF_DIST_ID="${{ steps.get_terraform_outputs.outputs.cloudfront_distribution_id }}"
          if [ -z "$CF_DIST_ID" ]; then echo "::error::CloudFront distribution ID not found."; exit 1; fi 
          echo "Invalidating CloudFront cache for distribution: $CF_DIST_ID"

          aws cloudfront create-invalidation --distribution-id "$CF_DIST_ID" --paths "/*"
          # --paths "/*" すべてのパス

      # --- ★★★ ECS Fargate/ECRへのバックエンドデプロイ ★★★ ---
      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, Tag, and Push Docker image to ECR
        env:
          ECR_REGISTRY: 258632448142.dkr.ecr.ap-northeast-1.amazonaws.com
          ECR_REPOSITORY: nestjs-hannibal-3

          IMAGE_TAG: ${{ github.sha }}
          # Gitのコミットごとに自動生成される「SHA-1ハッシュ値」（40文字の英数字）です

        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # ローカルで Dockerイメージを作成する
          # -t タグ
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Update ECS Service to use new image
        env:
          AWS_REGION: ap-northeast-1
          CLUSTER_NAME: nestjs-hannibal-3-cluster
          # Terraformで作成済みのリソース nestjs-hannibal-3-cluster を GitHub Actions の環境変数に格納する
          SERVICE_NAME: nestjs-hannibal-3-api-service
          TASK_FAMILY: nestjs-hannibal-3-api-task
          CONTAINER_NAME: nestjs-hannibal-3-container
          IMAGE_TAG: ${{ github.sha }}
          ECR_REGISTRY: 258632448142.dkr.ecr.ap-northeast-1.amazonaws.com
          # AWSアカウント×リージョンごとに1つ自動で割り当てられます
          ECR_REPOSITORY: nestjs-hannibal-3
        run: |

          TASK_DEF_ARN=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[0].taskDefinition" --output text)
          # ECSにある現状のタスク定義を取得している
          # タスク定義 どのイメージを使うか、リソース、環境変数などの設計図
          # services[0] 返り値は必ず services という配列になるので、services[0]と指定する
          # taskDefinition タスク定義のARN
          # クラスタ名とサービス名を指定すれば、「そのサービスが使っているタスク定義（設計図）」は一意に特定できます

          aws ecs describe-task-definition --task-definition $TASK_DEF_ARN > task-def.json
          # タスク定義の詳細情報を取得し、ファイルに保存する

          # Dockerイメージの書き換え
          # jqの | パイプは「部分的に値を更新し、全体の構造を維持する」動きをします
          # クォートでくくってある範囲は「jqに渡すJSON加工用のスクリプト」です

          NEW_IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          cat task-def.json | jq --arg IMAGE "$NEW_IMAGE" --arg NAME "$CONTAINER_NAME" '(.taskDefinition.containerDefinitions[] | select(.name == $NAME) | .image) |= $IMAGE | .taskDefinition | {
            family,
            taskRoleArn,
            executionRoleArn,
            networkMode,
            containerDefinitions,
            volumes,
            placementConstraints,
            requiresCompatibilities,
            cpu,
            memory,
            tags,
            runtimePlatform
          } | with_entries(select(.value != null))' > new-task-def.json
          # {} jqのオブジェクトリテラル 指定したフィールドだけを抜き出して新しいJSONオブジェクトを作る
          # aws ecs register-task-definition では、受け付けるJSONのフィールドが厳密に決まっているため、主要な項目だけの新しいJSON ファイルを作る必要があります
          # with_entries オブジェクトの各プロパティ(キーと値のペア)に処理を行う関数です
          # select 条件に合う要素だけを残す  配列 → 各要素（オブジェクト）に対して select
          # .taskDefinition.containerDefinitions[] jq で使う場合、[] をつけるとループ処理やフィルタができる
          # |= は「部分的な値の更新」を意味するjqの演算子です


          # 新しいタスク定義を ECS に登録
          TASK_DEF_ARN_NEW=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
          # aws ecs register-task-definition 新しいECSタスク定義を登録し、登録した内容を JSON 形式で返す
          # --cli-input-json コマンドの入力パラメータをJSONでまとめて渡す
          # -query 返ってきた JSON の一部を抽出する
          # taskDefinitionArn はECSがタスク定義を登録したときに自動で付与する値です

          # サービスを新タスク定義で更新
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $TASK_DEF_ARN_NEW
          # ECSが新しいイメージからコンテナを作成・起動する
          
          # ECSサービスの安定化を待つ
          echo "Waiting for ECS service to stabilize..."
          aws ecs wait services-stable --cluster $CLUSTER_NAME --services $SERVICE_NAME --region $AWS_REGION
          echo "ECS service is now stable"
