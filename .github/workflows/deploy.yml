name: Deploy NestJS Hannibal

env:
  AWS_ACCOUNT_ID: "258632448142"
  PROJECT_NAME: "nestjs-hannibal-3"
  AWS_REGION: "ap-northeast-1"
  TERRAFORM_VERSION: "1.12.1"
  NODE_VERSION: "20"

on:
  workflow_dispatch:
    inputs:
      deployment_mode:
        description: "デプロイモードを選択"
        required: true
        default: "canary"
        type: choice
        options:
          - canary         # 1回目以降（Canary段階的切替）
          - bluegreen      # 1回目以降（Blue/Green切替）
          - provisioning   # 0回目（初期構築・Blueのみ）

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install backend dependencies
        run: npm ci
      - name: Run backend tests
        run: npm test
      - name: Setup Node.js for client
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      - name: Install client dependencies
        run: npm ci
        working-directory: ./client

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
          jq --version

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false
        env:
          TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache

      - name: Verify Terraform installation
        run: |
          terraform version
          which terraform

      - name: Assume CICD Role
        run: |
          set -e
          ROLE_ARN="arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/HannibalCICDRole-Dev"
          SESSION_NAME="github-actions-deploy-$(date +%s)"
          CREDS=$(aws sts assume-role \
            --role-arn "$ROLE_ARN" \
            --role-session-name "$SESSION_NAME" \
            --output json)
          echo "AWS_ACCESS_KEY_ID=$(echo "$CREDS" | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo "$CREDS" | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo "$CREDS" | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - name: Deploy Infrastructure
        working-directory: ./terraform/environments/dev
        run: |
          set -e
          terraform init -input=false
          
          # deployment_typeを設定（provisioningの場合はcanaryをデフォルト使用）
          DEPLOYMENT_TYPE="${{ inputs.deployment_mode }}"
          if [ "$DEPLOYMENT_TYPE" = "provisioning" ]; then
            DEPLOYMENT_TYPE="canary"
          fi
          
          terraform plan \
            -var="client_url_for_cors=https://hamilcar-hannibal.click" \
            -var="environment=dev" \
            -var="deployment_type=$DEPLOYMENT_TYPE" \
            -var="enable_cloudfront=true" \
            -out=tfplan
          terraform apply -auto-approve tfplan
          
          # Environment Variables方式でTerraform出力を設定
          echo "ALB_DNS=$(terraform output -raw alb_dns_name)" >> $GITHUB_ENV
          echo "S3_BUCKET=$(terraform output -raw s3_bucket_name)" >> $GITHUB_ENV
          echo "CLOUDFRONT_ARN=$(terraform output -raw cloudfront_distribution_arn)" >> $GITHUB_ENV

      - name: Build and Deploy Frontend
        run: |
          set -e
          cd client
          echo "VITE_GRAPHQL_ENDPOINT=/graphql" > .env.production
          npm ci
          npm run build
          
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }}/ --delete
          
          if [ "${{ env.CLOUDFRONT_ARN }}" != "" ]; then
            CLOUDFRONT_ID=$(echo ${{ env.CLOUDFRONT_ARN }} | cut -d'/' -f2)
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"
          fi

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # 方式A: SHAタグとlatestタグの両方をPush（0回目でもlatestをPull可能にする）
      - name: Build and Push ECS Image
        run: |
          set -e
          REPO="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.PROJECT_NAME }}"
          IMAGE_SHA_TAG="$REPO:${{ github.sha }}"
          IMAGE_LATEST_TAG="$REPO:latest"

          echo "🐳 Building Docker image: $IMAGE_SHA_TAG"
          docker build -t "$IMAGE_SHA_TAG" .

          echo "🔖 Tagging also as: $IMAGE_LATEST_TAG"
          docker tag "$IMAGE_SHA_TAG" "$IMAGE_LATEST_TAG"

          echo "📤 Pushing SHA tag..."
          docker push "$IMAGE_SHA_TAG"

          echo "📤 Pushing latest tag..."
          docker push "$IMAGE_LATEST_TAG"

          echo "NEW_IMAGE=$IMAGE_SHA_TAG" >> $GITHUB_ENV
          echo "✅ Docker image pushed with SHA and latest tags"

      - name: Generate AppSpec for ECS CodeDeploy
        run: |
          set -e
          aws ecs describe-task-definition \
            --task-definition "${{ env.PROJECT_NAME }}-api-task" \
            --query 'taskDefinition' > current_task_def.json
          CONTAINER_NAME=$(jq -r '.containerDefinitions[0].name' current_task_def.json)
          CONTAINER_PORT=$(jq -r '.containerDefinitions[0].portMappings[0].containerPort' current_task_def.json)
          jq --arg IMAGE "$NEW_IMAGE" \
            '.containerDefinitions[0].image = $IMAGE |
             del(.taskDefinitionArn, .revision, .status,
                 .requiresAttributes, .placementConstraints,
                 .compatibilities, .registeredAt, .registeredBy)' \
            current_task_def.json > new_task_def.json
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new_task_def.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV
          cat > appspec.yaml << EOF
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: $NEW_TASK_DEF_ARN
                  LoadBalancerInfo:
                    ContainerName: "$CONTAINER_NAME"
                    ContainerPort: $CONTAINER_PORT
          EOF

      - name: Deploy with CodeDeploy Blue/Green
        if: ${{ inputs.deployment_mode == 'bluegreen' }}
        run: |
          set -e
          S3_BUCKET="${{ env.PROJECT_NAME }}-codedeploy-artifacts"
          S3_KEY="appspec-${{ github.sha }}.yaml"
          aws s3 cp appspec.yaml "s3://$S3_BUCKET/$S3_KEY"
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name "${{ env.PROJECT_NAME }}-app" \
            --deployment-group-name "${{ env.PROJECT_NAME }}-dg" \
            --s3-location bucket="$S3_BUCKET",key="$S3_KEY",bundleType="YAML" \
            --query 'deploymentId' --output text)
          echo "🚀 CodeDeploy Blue/Green deployment started: $DEPLOYMENT_ID"
          aws deploy wait deployment-successful --deployment-id "$DEPLOYMENT_ID"
          echo "✅ Blue/Green deployment finished"

      - name: Deploy with CodeDeploy Canary
        if: ${{ inputs.deployment_mode == 'canary' }}
        run: |
          set -e
          S3_BUCKET="${{ env.PROJECT_NAME }}-codedeploy-artifacts"
          S3_KEY="appspec-${{ github.sha }}.yaml"
          aws s3 cp appspec.yaml "s3://$S3_BUCKET/$S3_KEY"
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name "${{ env.PROJECT_NAME }}-app" \
            --deployment-group-name "${{ env.PROJECT_NAME }}-dg" \
            --s3-location bucket="$S3_BUCKET",key="$S3_KEY",bundleType="YAML" \
            --query 'deploymentId' --output text)
          echo "🔍 CodeDeploy Canary deployment started: $DEPLOYMENT_ID"
          echo "📊 Phase 1: 10% traffic to new version (5 minutes monitoring)"
          echo "📊 Phase 2: 100% traffic if no alarms triggered"
          echo "📊 Monitor: https://console.aws.amazon.com/codesuite/codedeploy/deployments/$DEPLOYMENT_ID"
          aws deploy wait deployment-successful --deployment-id "$DEPLOYMENT_ID"
          echo "✅ Canary deployment finished successfully!"
