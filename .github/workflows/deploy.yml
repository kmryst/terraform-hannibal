# .github/workflows/deploy.yml (jqエラー特定版デバッグコード適用済み)

name: Deploy NestJS Hannibal App

on:
  pull_request:
    branches: [ec2s3cf] # トリガーブランチ
  push:
    branches: [ec2s3cf] # トリガーブランチ

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for Backend
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install Backend Dependencies
        run: npm ci

      - name: Run Backend Tests
        run: npm test

      - name: Setup Node.js for Frontend
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: ./client

      - name: Run Frontend Tests
        run: echo "Frontend tests would run here (e.g., npm run test)"
        working-directory: ./client

  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/ec2s3cf'
    runs-on: ubuntu-latest
    outputs:
      s3_bucket_name: ${{ steps.get_terraform_outputs.outputs.s3_bucket_name }}
      cloudfront_distribution_id: ${{ steps.get_terraform_outputs.outputs.cloudfront_distribution_id }}
      ec2_instance_id: ${{ steps.get_terraform_outputs.outputs.ec2_instance_id }}
      backend_eip_address: ${{ steps.get_terraform_outputs.outputs.backend_eip_address }}
      cloudfront_domain_name: ${{ steps.get_terraform_outputs.outputs.cloudfront_domain_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: ./terraform
        continue-on-error: true

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -no-color
        working-directory: ./terraform

      - name: Get Terraform Outputs
        id: get_terraform_outputs
        run: |
          echo "Retrieving Terraform outputs..."
          cd ./terraform
          terraform output -json > tf_outputs.json
          echo "--- Terraform Outputs (JSON) ---"
          cat tf_outputs.json
          echo "--------------------------------"
          cd ..
          echo "s3_bucket_name=$(jq -r '.s3_bucket_name.value' ./terraform/tf_outputs.json)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(jq -r '.cloudfront_distribution_id.value' ./terraform/tf_outputs.json)" >> $GITHUB_OUTPUT
          echo "ec2_instance_id=$(jq -r '.ec2_instance_id.value' ./terraform/tf_outputs.json)" >> $GITHUB_OUTPUT
          echo "backend_eip_address=$(jq -r '.backend_eip_address.value' ./terraform/tf_outputs.json)" >> $GITHUB_OUTPUT
          echo "cloudfront_domain_name=$(jq -r '.cloudfront_domain_name.value' ./terraform/tf_outputs.json)" >> $GITHUB_OUTPUT
          echo "::set-output name=s3_bucket_name::$(jq -r '.s3_bucket_name.value' ./terraform/tf_outputs.json)"
          echo "::set-output name=cloudfront_distribution_id::$(jq -r '.cloudfront_distribution_id.value' ./terraform/tf_outputs.json)"
          echo "::set-output name=ec2_instance_id::$(jq -r '.ec2_instance_id.value' ./terraform/tf_outputs.json)"
          echo "::set-output name=backend_eip_address::$(jq -r '.backend_eip_address.value' ./terraform/tf_outputs.json)"
          echo "::set-output name=cloudfront_domain_name::$(jq -r '.cloudfront_domain_name.value' ./terraform/tf_outputs.json)"
        working-directory: ./

      - name: Setup Node.js for Frontend Build
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install Frontend Dependencies for Build
        run: npm ci
        working-directory: ./client

      - name: Build Frontend
        run: npm run build
        working-directory: ./client

      - name: Deploy Frontend to S3
        run: |
          S3_BUCKET="${{ steps.get_terraform_outputs.outputs.s3_bucket_name }}"
          if [ -z "$S3_BUCKET" ]; then
            echo "::error::S3 bucket name not found in Terraform outputs."
            exit 1
          fi
          echo "Deploying frontend to bucket: $S3_BUCKET"
          aws s3 sync ./client/dist "s3://$S3_BUCKET" --delete

      - name: Invalidate CloudFront Cache
        run: |
          CF_DIST_ID="${{ steps.get_terraform_outputs.outputs.cloudfront_distribution_id }}"
          if [ -z "$CF_DIST_ID" ]; then
            echo "::error::CloudFront distribution ID not found in Terraform outputs."
            exit 1
          fi
          echo "Invalidating CloudFront cache for distribution: $CF_DIST_ID"
          aws cloudfront create-invalidation --distribution-id "$CF_DIST_ID" --paths "/*"

      # --- ★★★ EC2へのバックエンドデプロイ (jqエラー特定版) ★★★ ---
      - name: Deploy Backend to EC2 via SSM
        id: deploy_backend # ステップIDを追加
        run: |
          # --- 初期設定と認証確認 (変更なし) ---
          INSTANCE_ID="${{ steps.get_terraform_outputs.outputs.ec2_instance_id }}"
          if [ -z "$INSTANCE_ID" ]; then echo "::error::EC2 instance ID not found."; exit 1; fi
          echo "Deploying backend to EC2 instance: $INSTANCE_ID"
          echo "Checking AWS Caller Identity..."
          aws sts get-caller-identity || { echo "::error::Failed to verify AWS caller identity."; exit 1; }
          echo "AWS Caller Identity verified."

          # --- SSMコマンド用スクリプト定義 (変更なし) ---
          read -r -d '' SCRIPT_CONTENT << 'EOF'
          #!/bin/bash
          set -eo pipefail
          echo "--- Starting deployment script on EC2 as user: $(whoami) ---"
          sudo -i -u ec2-user bash << 'INNER_EOF'
            set -eo pipefail
            echo "--- Running commands as user: $(whoami) in directory: $(pwd) ---"
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then source "$NVM_DIR/nvm.sh"; echo "NVM loaded."; else echo "::error::NVM script not found."; exit 1; fi
            echo "Node: $(node -v), npm: $(npm -v), pm2: $(pm2 -v)"
            cd /home/ec2-user || { echo "::error::cd /home/ec2-user failed"; exit 1; }
            APP_DIR="nestjs-hannibal-3"
            echo "Removing old $APP_DIR..."; rm -rf "$APP_DIR"; echo "Old dir removed."
            echo "Cloning $APP_DIR..."
            # !!! 重要: YOUR_GITHUB_USERNAME_OR_ORG を置き換えてください !!!
            GIT_REPO_URL="https://github.com/YOUR_GITHUB_USERNAME_OR_ORG/nestjs-hannibal-3.git"
            git clone -b ec2s3cf "$GIT_REPO_URL" "$APP_DIR" || { echo "::error::git clone failed"; exit 1; }
            echo "Cloned."
            cd "$APP_DIR" || { echo "::error::cd $APP_DIR failed"; exit 1; }; echo "Changed to $(pwd)"
            echo "Installing dependencies..."; npm ci --legacy-peer-deps || { echo "::error::npm ci failed"; exit 1; }; echo "Deps installed."
            echo "Building app..."; npm run build || { echo "::error::npm run build failed"; exit 1; }; echo "Build complete."
            PM2_APP_NAME="nestjs-api"; echo "Handling PM2 process $PM2_APP_NAME..."; pm2 stop "$PM2_APP_NAME" || true; pm2 delete "$PM2_APP_NAME" || true; echo "Old PM2 process handled."
            echo "Starting PM2 process $PM2_APP_NAME..."; pm2 start dist/main.js --name "$PM2_APP_NAME" || { echo "::error::pm2 start failed"; exit 1; }; echo "PM2 started."
            echo "Saving PM2 list..."; pm2 save || echo "::warning::pm2 save failed."; echo "PM2 list saved."
            echo "--- PM2 status ---"; pm2 list; echo "------------------"
          INNER_EOF
          echo "--- Deployment script on EC2 finished successfully ---"
          EOF
          # --- スクリプト定義終了 ---

          # --- jq コマンド実行とエラーチェックを分離 ---
          echo "--- Raw SCRIPT_CONTENT to be processed by jq ---"
          echo "$SCRIPT_CONTENT"
          echo "------------------------------------------------"

          echo "Attempting to generate JSON array using jq..."
          # jqコマンドを実行し、エラー出力も変数にキャプチャ (2>&1)
          JQ_OUTPUT=$(echo "$SCRIPT_CONTENT" | jq -Rs '. | split("\n") | map(select(length > 0))' 2>&1)
          JQ_EXIT_CODE=$?

          if [ $JQ_EXIT_CODE -ne 0 ]; then
            echo "::error::jq command failed with exit code $JQ_EXIT_CODE."
            echo "--- jq Output/Error ---"
            echo "$JQ_OUTPUT" # jq の標準出力または標準エラー出力を表示
            echo "-----------------------"
            exit 1
          else
            COMMANDS_JSON="$JQ_OUTPUT"
            echo "jq command successful. Generated JSON:"
            echo "$COMMANDS_JSON" | head -c 500
            echo "..."
          fi
          # --- jq 処理終了 ---

          # --- send-command 実行 (前回と同じ) ---
          echo "Attempting to send SSM command to instance $INSTANCE_ID..."
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters "{\"commands\": $COMMANDS_JSON}" \
            --timeout-seconds 600 \
            --output json
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::'aws ssm send-command' failed with exit code $EXIT_CODE. See AWS CLI output above for details."
            exit 1
          else
            echo "'aws ssm send-command' request was sent successfully (Command ID not captured)."
            echo "Skipping command execution status check."
          fi
          echo "Backend deployment step finished (debug version focused on jq)."
        env:
          AWS_DEFAULT_REGION: ap-northeast-1
          AWS_REGION: ap-northeast-1
          # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        shell: bash
