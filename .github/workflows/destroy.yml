name: Destroy AWS Infrastructure (Reliable)

env:
  AWS_ACCOUNT_ID: "258632448142"
  PROJECT_NAME: "nestjs-hannibal-3"
  AWS_REGION: "ap-northeast-1"
  TERRAFORM_VERSION: "1.12.1"

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string

jobs:
  destroy:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'DESTROY'
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install prerequisites
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq unzip

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Assume CICD Role
        run: |
          set -e
          CREDS=$(aws sts assume-role \
            --role-arn arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/HannibalCICDRole-Dev \
            --role-session-name destroy-$(date +%s))
          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV
          echo "✅ Assumed CICD role"

      - name: Stop active CodeDeploy deployments
        run: |
          set -e
          APP_NAME="${{ env.PROJECT_NAME }}-app"
          echo "🔎 Listing active deployments for $APP_NAME"
          DEPLOYMENTS=$(aws deploy list-deployments \
            --application-name "$APP_NAME" \
            --include-only-statuses InProgress Queued Ready \
            2>/dev/null || echo '{"deployments":[]}')
          CNT=$(echo "$DEPLOYMENTS" | jq -r '.deployments | length')
          if [ "$CNT" -gt 0 ]; then
            for id in $(echo "$DEPLOYMENTS" | jq -r '.deployments[]'); do
              echo "🛑 Stopping deployment: $id"
              aws deploy stop-deployment --deployment-id "$id" --auto-rollback-enabled || true
            done
          else
            echo "✅ No active deployments"
          fi

      - name: Scale down ECS service and wait stable
        run: |
          set -e
          CLUSTER="${{ env.PROJECT_NAME }}-cluster"
          SERVICE="${{ env.PROJECT_NAME }}-api-service"
          echo "🔧 Scaling down ECS service $SERVICE in $CLUSTER to 0"
          aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --desired-count 0 || true

          echo "⏳ Waiting for ECS service to become stable (0 desired)..."
          ATTEMPTS=10
          for i in $(seq 1 $ATTEMPTS); do
            STATUS=$(aws ecs describe-services --cluster "$CLUSTER" --services "$SERVICE" \
              --query 'services[].deployments[].desiredCount' --output text 2>/dev/null || echo "Unknown")
            echo "Attempt $i/$ATTEMPTS: desiredCount=$STATUS"
            if [ "$STATUS" = "0" ] || [ "$STATUS" = "None" ] || [ "$STATUS" = "Unknown" ]; then
              break
            fi
            sleep 30
          done
          aws ecs wait services-stable --cluster "$CLUSTER" --services "$SERVICE" || true
          echo "✅ ECS service scaled down or stable"

      - name: Destroy Infrastructure (Modularized)
        working-directory: ./terraform/environments/dev
        run: |
          set -e
          terraform init -input=false
          terraform destroy -auto-approve \
            -var="client_url_for_cors=" \
            -var="environment=dev" \
            -var="deployment_type=canary" \
            -var="enable_cloudfront=true"

      - name: Cleanup S3 buckets (best-effort)
        run: |
          set -e
          aws s3 rm s3://${{ env.PROJECT_NAME }}-codedeploy-artifacts --recursive || true
          FRONTEND_BUCKET=$(jq -r '.s3_bucket_name.value' terraform/environments/dev/tf_outputs.json 2>/dev/null || echo "")
          if [ -n "$FRONTEND_BUCKET" ]; then
            aws s3 rm s3://$FRONTEND_BUCKET --recursive || true
          fi

      - name: Cleanup ECR images (best-effort)
        run: |
          set -e
          REPO="${{ env.PROJECT_NAME }}"
          aws ecr batch-delete-image --repository-name "$REPO" --image-ids imageTag=latest || true
          IDS=$(aws ecr list-images --repository-name "$REPO" --query 'imageIds' --output json 2>/dev/null || echo "[]")
          if [ "$(echo "$IDS" | jq 'length')" -gt 0 ]; then
            echo "$IDS" | aws ecr batch-delete-image --repository-name "$REPO" --image-ids file:///dev/stdin || true
          fi

      - name: Final ELB/TG cleanup (best-effort)
        run: |
          set -e
          ALB_ARN=$(aws elbv2 describe-load-balancers --names ${{ env.PROJECT_NAME }}-alb \
            --query 'LoadBalancers[0].LoadBalancerArn' --output text 2>/dev/null || echo "None")
          if [ "$ALB_ARN" != "None" ]; then
            aws elbv2 describe-listeners --load-balancer-arn "$ALB_ARN" \
              --query 'Listeners[*].ListenerArn' --output text 2>/dev/null | \
              xargs -n1 aws elbv2 delete-listener --listener-arn || true
            aws elbv2 delete-load-balancer --load-balancer-arn "$ALB_ARN" || true
            sleep 20
          fi
          for tg in "${{ env.PROJECT_NAME }}-blue-tg" "${{ env.PROJECT_NAME }}-green-tg"; do
            TG_ARN=$(aws elbv2 describe-target-groups --names "$tg" \
              --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null || echo "None")
            if [ "$TG_ARN" != "None" ]; then
              aws elbv2 delete-target-group --target-group-arn "$TG_ARN" || true
            fi
          done

      - name: Summary
        run: |
          echo "✅ Destroy workflow completed."
          echo "- CodeDeploy deployments stopped"
          echo "- ECS service scaled down and waited stable"
          echo "- Terraform destroy (backend -> frontend) executed"
          echo "- Best-effort cleanup for S3/ECR/ELB/TG finished"
