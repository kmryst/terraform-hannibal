
// プロジェクト構成
C:\code\javascript\nestjs-hannibal-3\.git
C:\code\javascript\nestjs-hannibal-3\.github
C:\code\javascript\nestjs-hannibal-3\client
C:\code\javascript\nestjs-hannibal-3\dist
C:\code\javascript\nestjs-hannibal-3\memo
C:\code\javascript\nestjs-hannibal-3\node_modules
C:\code\javascript\nestjs-hannibal-3\src
C:\code\javascript\nestjs-hannibal-3\terraform
C:\code\javascript\nestjs-hannibal-3\test
C:\code\javascript\nestjs-hannibal-3\.env
C:\code\javascript\nestjs-hannibal-3\.eslintrc.js
C:\code\javascript\nestjs-hannibal-3\.gitignore
C:\code\javascript\nestjs-hannibal-3\.prettierrc
C:\code\javascript\nestjs-hannibal-3\nest-cli.json
C:\code\javascript\nestjs-hannibal-3\package-lock.json
C:\code\javascript\nestjs-hannibal-3\package.json
C:\code\javascript\nestjs-hannibal-3\README.md
C:\code\javascript\nestjs-hannibal-3\SessionManagerPluginSetup.exe
C:\code\javascript\nestjs-hannibal-3\tsconfig.build.json
C:\code\javascript\nestjs-hannibal-3\tsconfig.json
C:\code\javascript\nestjs-hannibal-3\ync function bootstrap() {
C:\code\javascript\nestjs-hannibal-3\.github\workflows
C:\code\javascript\nestjs-hannibal-3\.github\workflows\deploy.yml
C:\code\javascript\nestjs-hannibal-3\src\common
C:\code\javascript\nestjs-hannibal-3\src\geojson_data
C:\code\javascript\nestjs-hannibal-3\src\graphql
C:\code\javascript\nestjs-hannibal-3\src\modules
C:\code\javascript\nestjs-hannibal-3\src\app.controller.spec.ts
C:\code\javascript\nestjs-hannibal-3\src\app.controller.ts
C:\code\javascript\nestjs-hannibal-3\src\app.module.ts
C:\code\javascript\nestjs-hannibal-3\src\app.service.ts
C:\code\javascript\nestjs-hannibal-3\src\main.ts
C:\code\javascript\nestjs-hannibal-3\src\common\interfaces
C:\code\javascript\nestjs-hannibal-3\src\common\interfaces\geo.interface.ts
C:\code\javascript\nestjs-hannibal-3\src\geojson_data\capitalCities.ts
C:\code\javascript\nestjs-hannibal-3\src\geojson_data\hannibalRoute.ts
C:\code\javascript\nestjs-hannibal-3\src\geojson_data\pointRoute.ts
C:\code\javascript\nestjs-hannibal-3\src\graphql\schema
C:\code\javascript\nestjs-hannibal-3\src\graphql\graphql.schema.ts
C:\code\javascript\nestjs-hannibal-3\src\graphql\schema\map.graphql
C:\code\javascript\nestjs-hannibal-3\test\app.e2e-spec.ts
C:\code\javascript\nestjs-hannibal-3\test\jest-e2e.json









// pacage.json
{
  "name": "nestjs-hannibal-3",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "cross-env NODE_ENV=production node dist/main", 

    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json"
  },
  "dependencies": {
    "@apollo/client": "^3.8.7",
    "@nestjs/apollo": "^12.0.9",
    "@nestjs/common": "^10.0.0",
    "@nestjs/config": "^3.1.1",
    "@nestjs/core": "^10.0.0",
    "@nestjs/graphql": "^12.0.9",
    "@nestjs/platform-express": "^10.0.0",
    "@types/cors": "^2.8.14",
    "apollo-server-express": "^3.12.1",
    "cors": "^2.8.5",
    "graphql": "^16.8.1",
    "mapbox-gl": "^2.15.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "reflect-metadata": "^0.1.13",
    "rxjs": "^7.8.1",
    "ts-morph": "^19.0.0"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.0.0",
    "@nestjs/schematics": "^10.0.0",
    "@nestjs/testing": "^10.0.0",
    "@types/express": "^5.0.0",
    "@types/jest": "^29.5.2",
    "@types/node": "^20.6.3",
    "@types/supertest": "^6.0.0",
    "@typescript-eslint/eslint-plugin": "^8.0.0",
    "@typescript-eslint/parser": "^8.0.0",
    "eslint": "^8.0.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "jest": "^29.5.0",
    "prettier": "^3.0.0",
    "source-map-support": "^0.5.21",
    "supertest": "^7.0.0",
    "ts-jest": "^29.1.0",
    "ts-loader": "^9.4.3",
    "ts-node": "^10.9.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.2.2"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }
}





// Dockerfile
なし





// .env
PORT=4000
HOST=0.0.0.0
NODE_ENV=development

REACT_APP_GRAPHQL_ENDPOINT=https://192.168.1.3:4000/graphql




// C:\code\javascript\nestjs-hannibal-3\src\main.ts
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ConfigService } from '@nestjs/config';
import { Logger } from '@nestjs/common'; // Loggerを追加 ログ出力用クラス

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  const configService = app.get(ConfigService);
  const logger = new Logger('Bootstrap'); // Loggerインスタンスを作成 BootstrapはこのLoggerを識別するためのラベル

  const port = configService.get<number>('PORT', 3000); // .env, process.env から取得する
  const host = configService.get<string>('HOST', '0.0.0.0');
  const nodeEnv = configService.get<string>('NODE_ENV', 'development');

  let allowedOrigins: string[] = []; // 許可するオリジンのリスト どのサイトからのアクセスを許可するか

  if (nodeEnv === 'production') {
    const clientUrl = configService.get<string>('CLIENT_URL'); // 本番用フロントエンドURL
    if (clientUrl) {
      allowedOrigins.push(clientUrl);
      // allowedOrigins という配列に、clientUrl を追加して、アクセスを許可する CORS
      logger.log(`Production CORS: Allowing origin: ${clientUrl}`);
      // ログを出力＝記録している
    } else {
      logger.warn('Production CORS: CLIENT_URL environment variable is not set. No external origins will be allowed');
      // 警告、記録している
      // external: 外部
      // 必要であれば、ここでデフォルトの挙動（エラーにするなど）を定義
    }
  } else {
    // 開発環境の場合は、既存の .env で定義されているローカル開発用URLを許可
    const devClientUrlLocal = configService.get<string>('DEV_CLIENT_URL_LOCAL', 'http://localhost:5173');
    const devClientUrlIp = configService.get<string>('DEV_CLIENT_URL_IP', 'http://192.168.1.3:5173');
    allowedOrigins = [devClientUrlLocal, devClientUrlIp];
    logger.log(`Development CORS: Allowing origins: ${allowedOrigins.join(', ')}`);
    // .joinで配列の要素をすべて結合して、間にカンマを入れる
  }

  // origin: リクエスト発信元の情報（スキーム・ホスト名・ポート番号）を示すHTTPヘッダー 例: "https://example.com:8080" のような形式
  // ブラウザがクロスオリジン通信（CORS）時に自動で付与し、サーバー側はこの値をもとにアクセス許可するオリジンかどうかを判定する
  app.enableCors({ // CORSの設定をまとめて渡す
    origin: (origin, callback) => { // origin: リクエスト元 callbak: 判定結果
      // !origin: Originヘッダーが無いリクエスト（サーバー間通信やツール等）はCORSチェックをスキップして許可
      // 許可リストに含まれるオリジンか判定、許可
      if (!origin || allowedOrigins.some(allowed => origin.startsWith(allowed))) {
        callback(null, true); // ← ここで「このoriginは許可！」とCORSミドルウェアに通知
      
        // ↓↓ ここから先はCORSミドルウェア（サーバー側）が自動的に実行する処理 ↓↓
        // サーバーはレスポンスヘッダーに下記を付与する
        //   Access-Control-Allow-Origin: <リクエスト元のorigin>
        //   Access-Control-Allow-Credentials: true
        //   Access-Control-Allow-Methods: GET,POST,OPTIONS
        //   Access-Control-Allow-Headers: Content-Type,Authorization 
        // ブラウザはこれらのヘッダーを受け取り
        // 「このリクエストは許可された！」と判断し、API通信を継続する
        // （もしプリフライトリクエスト（OPTIONS）の場合も、同様にヘッダーを付与してレスポンス）
      
      } else {
        logger.error(`CORS Error: Origin ${origin} not allowed.`);
        callback(new Error('Not allowed by CORS')); // ← ここで「このoriginは拒否！」とCORSミドルウェアに通知
      
        // ↓↓ ここから先はCORSミドルウェア（サーバー側）が自動的に実行する処理 ↓↓
        // サーバーはCORSエラーとしてレスポンスを返す
        // ブラウザは「CORS policyによりブロックされました」というエラーを表示し、API通信は中断される
      }
      
    },
    methods: ['GET', 'POST', 'OPTIONS'], // サーバーが許可するHTTPメソッド（リクエストの種類）を指定
    allowedHeaders: ['Content-Type', 'Authorization'], // 許可するHTTPヘッダーを指定
    credentials: true,
    // Cookieや認証情報を含むリクエストも許可
    // trueにすると、フロントエンドからのログイン状態の維持などが可能になります
  });

  await app.listen(port, host, () => { // await: サーバが起動するまで次の処理を待つ 
    logger.log(`🚀 Server ready at http://${host}:${port}/graphql`);
    logger.log(`Environment: ${nodeEnv}`);
    if (allowedOrigins.length > 0) {
      logger.log(`Allowed CORS origins: ${allowedOrigins.join(', ')}`);
    } else {
      logger.log('No origins explicitly allowed by CORS.'); // explicitly: 明確に
    }
  });
}
bootstrap();




dist/（構成例だけでOK、ファイル一覧で十分）
C:\code\javascript\nestjs-hannibal-3\dist\common
C:\code\javascript\nestjs-hannibal-3\dist\geojson_data
C:\code\javascript\nestjs-hannibal-3\dist\graphql
C:\code\javascript\nestjs-hannibal-3\dist\modules
C:\code\javascript\nestjs-hannibal-3\dist\app.controller.d.ts
C:\code\javascript\nestjs-hannibal-3\dist\app.controller.js
C:\code\javascript\nestjs-hannibal-3\dist\app.controller.js.map
C:\code\javascript\nestjs-hannibal-3\dist\app.module.d.ts
C:\code\javascript\nestjs-hannibal-3\dist\app.module.js
C:\code\javascript\nestjs-hannibal-3\dist\app.module.js.map
C:\code\javascript\nestjs-hannibal-3\dist\app.service.d.ts
C:\code\javascript\nestjs-hannibal-3\dist\app.service.js
C:\code\javascript\nestjs-hannibal-3\dist\app.service.js.map
C:\code\javascript\nestjs-hannibal-3\dist\main.d.ts
C:\code\javascript\nestjs-hannibal-3\dist\main.js
C:\code\javascript\nestjs-hannibal-3\dist\main.js.map
C:\code\javascript\nestjs-hannibal-3\dist\tsconfig.build.tsbuildinfo
C:\code\javascript\nestjs-hannibal-3\dist\common\interfaces
C:\code\javascript\nestjs-hannibal-3\dist\common\interfaces\geo.interface.d.ts
C:\code\javascript\nestjs-hannibal-3\dist\common\interfaces\geo.interface.js
C:\code\javascript\nestjs-hannibal-3\dist\common\interfaces\geo.interface.js.map
C:\code\javascript\nestjs-hannibal-3\dist\geojson_data\capitalCities.d.ts
C:\code\javascript\nestjs-hannibal-3\dist\geojson_data\capitalCities.js
C:\code\javascript\nestjs-hannibal-3\dist\geojson_data\capitalCities.js.map
C:\code\javascript\nestjs-hannibal-3\dist\geojson_data\hannibalRoute.d.ts
C:\code\javascript\nestjs-hannibal-3\dist\geojson_data\hannibalRoute.js
C:\code\javascript\nestjs-hannibal-3\dist\geojson_data\hannibalRoute.js.map
C:\code\javascript\nestjs-hannibal-3\dist\geojson_data\pointRoute.d.ts
C:\code\javascript\nestjs-hannibal-3\dist\geojson_data\pointRoute.js
C:\code\javascript\nestjs-hannibal-3\dist\geojson_data\pointRoute.js.map
C:\code\javascript\nestjs-hannibal-3\dist\graphql\graphql.schema.d.ts
C:\code\javascript\nestjs-hannibal-3\dist\graphql\graphql.schema.js
C:\code\javascript\nestjs-hannibal-3\dist\graphql\graphql.schema.js.map
C:\code\javascript\nestjs-hannibal-3\dist\modules\map
C:\code\javascript\nestjs-hannibal-3\dist\modules\route
C:\code\javascript\nestjs-hannibal-3\dist\modules\map\map.module.d.ts
C:\code\javascript\nestjs-hannibal-3\dist\modules\map\map.module.js
C:\code\javascript\nestjs-hannibal-3\dist\modules\map\map.module.js.map
C:\code\javascript\nestjs-hannibal-3\dist\modules\map\map.resolver.d.ts
C:\code\javascript\nestjs-hannibal-3\dist\modules\map\map.resolver.js
C:\code\javascript\nestjs-hannibal-3\dist\modules\map\map.resolver.js.map
C:\code\javascript\nestjs-hannibal-3\dist\modules\map\map.service.d.ts
C:\code\javascript\nestjs-hannibal-3\dist\modules\map\map.service.js
C:\code\javascript\nestjs-hannibal-3\dist\modules\map\map.service.js.map
C:\code\javascript\nestjs-hannibal-3\dist\modules\route\route.module.d.ts
C:\code\javascript\nestjs-hannibal-3\dist\modules\route\route.module.js
C:\code\javascript\nestjs-hannibal-3\dist\modules\route\route.module.js.map
C:\code\javascript\nestjs-hannibal-3\dist\modules\route\route.resolver.d.ts
C:\code\javascript\nestjs-hannibal-3\dist\modules\route\route.resolver.js
C:\code\javascript\nestjs-hannibal-3\dist\modules\route\route.resolver.js.map
C:\code\javascript\nestjs-hannibal-3\dist\modules\route\route.service.d.ts
C:\code\javascript\nestjs-hannibal-3\dist\modules\route\route.service.js
C:\code\javascript\nestjs-hannibal-3\dist\modules\route\route.service.js.map



// tsconfig.json
{
  "compilerOptions": {
    "jsx": "react-jsx",
    "module": "commonjs",
    "declaration": true,
    "removeComments": true,
    "emitDecoratorMetadata": true, // trueであることを確認
    "experimentalDecorators": true, // trueであることを確認
    "allowSyntheticDefaultImports": true,
    "target": "ES2021",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./",
    "incremental": true,
    "skipLibCheck": true,
    "strictNullChecks": false,
    "noImplicitAny": false,
    "strictBindCallApply": false,
    "forceConsistentCasingInFileNames": false,
    "noFallthroughCasesInSwitch": false
  },
  "exclude": [
    "client"
  ]
}

