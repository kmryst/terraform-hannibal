name: Deploy NestJS Hannibal App

on:
  pull_request:
    branches: [ec2s3cf] # トリガーブランチを ec2s3cf に設定
  push:
    branches: [ec2s3cf] # トリガーブランチを ec2s3cf に設定

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # バックエンドのテスト
      - name: Setup Node.js for Backend
        uses: actions/setup-node@v3
        with:
          node-version: '16' # バックエンドは Node.js 16 を使用
          cache: 'npm'

      - name: Install Backend Dependencies
        run: npm ci

      - name: Run Backend Tests
        run: npm test

      # フロントエンドのテスト
      - name: Setup Node.js for Frontend
        uses: actions/setup-node@v3
        with:
          node-version: '20' # フロントエンドは Node.js 20 を使用
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install Frontend Dependencies
        run: cd client && npm ci

      - name: Run Frontend Tests
        # (もしテストコマンドがあれば追記してください。例: npm run test)
        run: echo "Frontend tests would run here" # テストコマンドがない場合は削除または適切なコマンドに置き換え

  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/ec2s3cf' # デプロイ対象ブランチを ec2s3cf に設定
    runs-on: ubuntu-latest
    # ジョブの outputs を定義 (必須ではないが後で参照しやすい)
    outputs:
      s3_bucket_name: ${{ steps.get_terraform_outputs.outputs.s3_bucket_name }}
      cloudfront_distribution_id: ${{ steps.get_terraform_outputs.outputs.cloudfront_distribution_id }}
      ec2_instance_id: ${{ steps.get_terraform_outputs.outputs.ec2_instance_id }}

    steps:
      - uses: actions/checkout@v3

      # AWSの認証情報を設定
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      # Terraformをセットアップ (terraform_wrapper: false を追加)
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0 # Terraformのバージョン指定 (必要に応じて変更)
          terraform_wrapper: false # これを追加

      # Terraformを初期化
      - name: Terraform Init
        id: init # ステップIDを追加
        run: terraform init
        working-directory: ./terraform # terraformディレクトリで実行

      # Terraformプランを表示 (オプション)
      - name: Terraform Plan
        id: plan # ステップIDを追加
        run: terraform plan -var-file=terraform.tfvars # tfvars を使用している場合
        working-directory: ./terraform # terraformディレクトリで実行

      # Terraformを適用（インフラをデプロイ）
      # 注意: user_data を変更した場合、インスタンスの再作成が必要です。
      # terraform apply を実行する前に、EC2インスタンスを破棄するか、
      # Terraformがインスタンスを置き換えることを確認してください。
      - name: Terraform Apply
        id: apply # ステップIDを追加
        run: terraform apply -auto-approve -var-file=terraform.tfvars # tfvars を使用している場合
        working-directory: ./terraform # terraformディレクトリで実行

      # Terraform Outputs を取得してステップの Output に設定
      - name: Get Terraform Outputs
        id: get_terraform_outputs # このステップのID
        run: |
          # terraform output の結果を整形してステップの outputs に設定
          S3_BUCKET=$(terraform output -raw s3_bucket_name | head -n 1 | tr -d '\n' | tr -d '\r')
          CF_DIST_ID=$(terraform output -raw cloudfront_distribution_id | head -n 1 | tr -d '\n' | tr -d '\r')
          # インスタンスが再作成される可能性を考慮し、タグで最新の実行中インスタンスIDを取得
          # Terraform の project_name 変数を環境変数経由で取得 (デフォルト値も設定)
          PROJECT_NAME=${TF_VAR_project_name:-nestjs-hannibal}
          EC2_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$PROJECT_NAME-backend" "Name=instance-state-name,Values=running" --query "Reservations[].Instances[].InstanceId" --output text | tr -d '\n' | tr -d '\r')

          # GitHub Actions の新しい構文を使用
          echo "s3_bucket_name=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$CF_DIST_ID" >> $GITHUB_OUTPUT
          echo "ec2_instance_id=$EC2_ID" >> $GITHUB_OUTPUT

          # デバッグ用に取得した値を出力
          echo "S3 Bucket Name: $S3_BUCKET"
          echo "CloudFront Distribution ID: $CF_DIST_ID"
          echo "EC2 Instance ID: $EC2_ID"
        working-directory: ./terraform # terraformディレクトリで実行
        env:
          # Terraform Plan/Apply で tfvars を使っている場合、ここでも同じ変数を渡す必要があるかも
          TF_VAR_project_name: ${{ vars.TF_VAR_project_name || 'nestjs-hannibal' }} # リポジトリ変数などで設定

      # フロントエンドのビルド
      - name: Setup Node.js for Frontend
        uses: actions/setup-node@v3
        with:
          node-version: '20' # フロントエンドは Node.js 20 を使用
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: ./client # client ディレクトリで実行

      - name: Build Frontend
        run: npm run build
        working-directory: ./client # client ディレクトリで実行

      # S3へのデプロイ
      - name: Deploy to S3
        run: |
          echo "Deploying to bucket: ${{ steps.get_terraform_outputs.outputs.s3_bucket_name }}"
          aws s3 sync ./client/dist "s3://${{ steps.get_terraform_outputs.outputs.s3_bucket_name }}" --delete

      # CloudFrontキャッシュの無効化
      - name: Invalidate CloudFront Cache
        run: |
          echo "Invalidating CloudFront cache for distribution: ${{ steps.get_terraform_outputs.outputs.cloudfront_distribution_id }}"
          aws cloudfront create-invalidation --distribution-id "${{ steps.get_terraform_outputs.outputs.cloudfront_distribution_id }}" --paths "/*"

      # バックエンドのデプロイ（EC2）
      # user_dataでツールがインストールされている前提でコマンドを実行
      - name: Deploy Backend to EC2 via SSM
        run: |
          INSTANCE_ID="${{ steps.get_terraform_outputs.outputs.ec2_instance_id }}"

          if [ -z "$INSTANCE_ID" ]; then
            echo "EC2 instance ID not found or not running."
            exit 1
          fi

          echo "Deploying to EC2 instance: $INSTANCE_ID"

          # アプリケーションのデプロイと起動コマンド
          # ec2-user として実行し、シンボリックリンクを通じてコマンドを使用
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters commands='[
              "#!/bin/bash",
              "set -eo pipefail", # エラー発生時、パイプラインの途中でも終了
              "echo \"Running deployment script as user: $(whoami)\"",

              "# ec2-user としてアプリケーションを操作",
              "sudo -i -u ec2-user bash << EOF",
              "  set -eo pipefail", # サブシェルでもエラーチェックを有効に
              "  export NVM_DIR=\"$HOME/.nvm\"", # NVM_DIRをエクスポート
              "  [ -s \"$NVM_DIR/nvm.sh\" ] && \. \"$NVM_DIR/nvm.sh\"", # nvmをロード
              "  echo \"Running commands as user: $(whoami)\"",
              "  echo \"Using Node version: $(node -v)\"",
              "  echo \"Using npm version: $(npm -v)\"",
              "  echo \"Using pm2 version: $(pm2 -v)\"",

              "  cd /home/ec2-user",
              "  echo \"Removing old application directory...\"",
              "  rm -rf nestjs-hannibal-3",
              "  echo \"Cloning repository...\"",
              "  git clone -b ec2s3cf https://github.com/yourusername/nestjs-hannibal-3.git", # !!! 要修正: yourusername !!!
              "  cd nestjs-hannibal-3",
              "  echo \"Installing dependencies...\"",
              "  npm ci --legacy-peer-deps", # 必要に応じて --legacy-peer-deps
              "  echo \"Building application...\"",
              "  npm run build",
              "  echo \"Stopping/Deleting old PM2 process...\"",
              "  pm2 stop nestjs-api || true",
              "  pm2 delete nestjs-api || true",
              "  echo \"Starting new PM2 process...\"",
              "  pm2 start dist/main.js --name nestjs-api",
              "  pm2 save",
              "  echo \"PM2 status:\"",
              "  pm2 status",
              "EOF"
            ]' \
            --timeout-seconds 600 \
            --output text \
            --query "Command.CommandId")

          echo "SSM Command ID: $COMMAND_ID"

          # コマンドの実行完了を待機 (タイムアウト付き)
          echo "Waiting for command to complete..."
          aws ssm wait command-executed --command-id $COMMAND_ID --instance-id $INSTANCE_ID || echo "SSM command execution failed or timed out."

          # コマンドの結果を取得して表示
          echo "Checking command execution results..."
          OUTPUT=$(aws ssm list-command-invocations \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_ID \
            --details \
            --query "CommandInvocations[].CommandPlugins[].{Output:Output, Status:Status}" \
            --output json)

          echo "SSM Command Output:"
          # jq が runner にインストールされている前提
          echo "$OUTPUT" | jq .

          # エラーがあれば終了コードをセット
          STATUS=$(echo $OUTPUT | jq -r '.[0].Status')
          if [ "$STATUS" != "Success" ]; then
            echo "SSM command failed with status: $STATUS"
            exit 1
          fi

          echo "Deployment to EC2 completed successfully."

