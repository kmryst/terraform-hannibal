name: Deploy NestJS Hannibal App

on:
  pull_request:
    branches: [ec2s3cf] # トリガーブランチを ec2s3cf に設定
  push:
    branches: [ec2s3cf] # トリガーブランチを ec2s3cf に設定

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # バックエンドのテスト
      - name: Setup Node.js for Backend
        uses: actions/setup-node@v3
        with:
          node-version: '16' # バックエンドは Node.js 16 を使用
          cache: 'npm'

      - name: Install Backend Dependencies
        run: npm ci

      - name: Run Backend Tests
        run: npm test

      # フロントエンドのテスト
      - name: Setup Node.js for Frontend
        uses: actions/setup-node@v3
        with:
          node-version: '20' # フロントエンドは Node.js 20 を使用
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install Frontend Dependencies
        run: cd client && npm ci

      - name: Run Frontend Tests
        # (もしテストコマンドがあれば追記してください。例: npm run test)
        run: echo "Frontend tests would run here" # テストコマンドがない場合は削除または適切なコマンドに置き換え

  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/ec2s3cf' # デプロイ対象ブランチを ec2s3cf に設定
    runs-on: ubuntu-latest
    # ジョブの outputs を定義 (必須ではないが後で参照しやすい)
    outputs:
      s3_bucket_name: ${{ steps.get_terraform_outputs.outputs.s3_bucket_name }}
      cloudfront_distribution_id: ${{ steps.get_terraform_outputs.outputs.cloudfront_distribution_id }}
      ec2_instance_id: ${{ steps.get_terraform_outputs.outputs.ec2_instance_id }}

    steps:
      - uses: actions/checkout@v3

      # AWSの認証情報を設定
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      # Terraformをセットアップ (terraform_wrapper: false を追加)
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0 # Terraformのバージョン指定 (必要に応じて変更)
          terraform_wrapper: false # これを追加

      # Terraformを初期化
      - name: Terraform Init
        id: init # ステップIDを追加
        run: terraform init
        working-directory: ./terraform # terraformディレクトリで実行

      # Terraformプランを表示 (オプション)
      - name: Terraform Plan
        id: plan # ステップIDを追加
        run: terraform plan
        working-directory: ./terraform # terraformディレクトリで実行

      # Terraformを適用（インフラをデプロイ）
      - name: Terraform Apply
        id: apply # ステップIDを追加
        run: terraform apply -auto-approve
        working-directory: ./terraform # terraformディレクトリで実行

      # Terraform Outputs を取得してステップの Output に設定
      - name: Get Terraform Outputs
        id: get_terraform_outputs # このステップのID
        run: |
          # terraform output の結果を整形してステップの outputs に設定
          S3_BUCKET=$(terraform output -raw s3_bucket_name | head -n 1 | tr -d '\n' | tr -d '\r')
          CF_DIST_ID=$(terraform output -raw cloudfront_distribution_id | head -n 1 | tr -d '\n' | tr -d '\r')
          EC2_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=nestjs-hannibal-backend" --query "Reservations[].Instances[?State.Name=='running'].InstanceId" --output text | tr -d '\n' | tr -d '\r')

          # GitHub Actions の新しい構文を使用 (::set-output は非推奨)
          echo "s3_bucket_name=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$CF_DIST_ID" >> $GITHUB_OUTPUT
          echo "ec2_instance_id=$EC2_ID" >> $GITHUB_OUTPUT

          # デバッグ用に取得した値を出力
          echo "S3 Bucket Name: $S3_BUCKET"
          echo "CloudFront Distribution ID: $CF_DIST_ID"
          echo "EC2 Instance ID: $EC2_ID"
        working-directory: ./terraform # terraformディレクトリで実行

      # フロントエンドのビルド
      - name: Setup Node.js for Frontend
        uses: actions/setup-node@v3
        with:
          node-version: '20' # フロントエンドは Node.js 20 を使用
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: ./client # client ディレクトリで実行

      - name: Build Frontend
        run: npm run build
        working-directory: ./client # client ディレクトリで実行

      # S3へのデプロイ
      - name: Deploy to S3
        run: |
          echo "Deploying to bucket: ${{ steps.get_terraform_outputs.outputs.s3_bucket_name }}"
          aws s3 sync ./client/dist "s3://${{ steps.get_terraform_outputs.outputs.s3_bucket_name }}" --delete

      # CloudFrontキャッシュの無効化
      - name: Invalidate CloudFront Cache
        run: |
          echo "Invalidating CloudFront cache for distribution: ${{ steps.get_terraform_outputs.outputs.cloudfront_distribution_id }}"
          aws cloudfront create-invalidation --distribution-id "${{ steps.get_terraform_outputs.outputs.cloudfront_distribution_id }}" --paths "/*"

      # バックエンドのデプロイ（EC2）- PM2のインストールと設定を追加
      - name: Deploy Backend to EC2 via SSM
        run: |
          INSTANCE_ID="${{ steps.get_terraform_outputs.outputs.ec2_instance_id }}"

          if [ -z "$INSTANCE_ID" ]; then
            echo "EC2 instance ID not found in Terraform outputs or instance not running."
            exit 1
          fi

          echo "Deploying to EC2 instance: $INSTANCE_ID"

          # SSMを使用してコマンドを実行
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters commands='[
              "#!/bin/bash",
              "set -e",
              "cd /home/ec2-user",
              
              "# Node.jsとnpmのバージョン確認",
              "echo \"Node.js version: $(node -v)\"",
              "echo \"npm version: $(npm -v)\"",
              
              "# PM2のインストール確認と必要に応じてインストール",
              "if ! command -v pm2 &> /dev/null; then",
              "  echo \"Installing PM2 globally...\"",
              "  sudo npm install -g pm2",
              "else",
              "  echo \"PM2 is already installed: $(pm2 -v)\"",
              "fi",
              
              "# アプリケーションのデプロイ",
              "echo \"Cloning repository...\"",
              "rm -rf nestjs-hannibal-3",
              "git clone -b ec2s3cf https://github.com/yourusername/nestjs-hannibal-3.git",
              "cd nestjs-hannibal-3",
              
              "# 依存関係のインストールとビルド",
              "echo \"Installing dependencies...\"",
              "npm ci --legacy-peer-deps",
              "echo \"Building application...\"",
              "npm run build",
              
              "# NestJSアプリケーションの設定",
              "echo \"Creating ecosystem.config.js file...\"",
              "cat > ecosystem.config.js << \"EOF\"",
              "module.exports = {",
              "  apps: [{",
              "    name: \"nestjs-api\",",
              "    script: \"./dist/main.js\",",
              "    instances: 1,",
              "    exec_mode: \"fork\",",
              "    env: {",
              "      NODE_ENV: \"production\",",
              "      PORT: 3000",
              "    },",
              "    autorestart: true,",
              "    watch: false,",
              "    max_memory_restart: \"200M\"",
              "  }]",
              "};",
              "EOF",
              
              "# PM2でアプリケーションを起動/再起動",
              "echo \"Starting/restarting application with PM2...\"",
              "pm2 describe nestjs-api > /dev/null 2>&1",
              "if [ $? -eq 0 ]; then",
              "  echo \"Restarting existing PM2 process...\"",
              "  pm2 restart ecosystem.config.js",
              "else",
              "  echo \"Starting new PM2 process...\"",
              "  pm2 start ecosystem.config.js",
              "fi",
              
              "# PM2の自動起動設定",
              "echo \"Saving PM2 process list and setting up startup script...\"",
              "pm2 save",
              
              "# PM2の起動スクリプトを設定（初回のみ）",
              "if [ ! -f /etc/systemd/system/pm2-ec2-user.service ]; then",
              "  echo \"Setting up PM2 startup script...\"",
              "  sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ec2-user --hp /home/ec2-user",
              "fi",
              
              "echo \"Deployment completed successfully!\"",
              "pm2 status"
            ]' \
            --timeout-seconds 900 \
            --output text \
            --query "Command.CommandId")

          echo "SSM Command ID: $COMMAND_ID"
          
          # コマンドの実行状態を確認
          echo "Waiting for command to complete..."
          aws ssm wait command-executed --command-id $COMMAND_ID --instance-id $INSTANCE_ID
          
          # コマンドの結果を取得
          echo "Command execution details:"
          aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_ID \
            --query "{Status:Status,StatusDetails:StatusDetails,OutputS3BucketName:OutputS3BucketName,OutputS3KeyPrefix:OutputS3KeyPrefix}"
