name: Deploy NestJS Hannibal (Fast)

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - run: npm ci
      - run: npm test
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      - run: npm ci
        working-directory: ./client

  deploy:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      s3_bucket_name: ${{ steps.outputs.outputs.s3_bucket_name }}
      cloudfront_distribution_id: ${{ steps.outputs.outputs.cloudfront_distribution_id }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.0
      - run: sudo apt-get update && sudo apt-get install -y jq

      # Assume CICD Role
      - name: Assume CICD Role
        run: |
          CREDS=$(aws sts assume-role --role-arn arn:aws:iam::258632448142:role/HannibalCICDRole-Dev --role-session-name deploy)
          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      # Deploy Backend Infrastructure
      - name: Deploy Backend
        run: |
          terraform init -input=false
          terraform apply -auto-approve -var="client_url_for_cors=https://hamilcar-hannibal.click" -var="environment=dev"
          terraform output -json > ../tf_outputs_backend.json
        working-directory: ./terraform/backend

      # Deploy Frontend Infrastructure
      - name: Deploy Frontend Infrastructure
        run: |
          terraform init -input=false
          terraform apply -auto-approve -var="api_alb_dns_name=$(jq -r '.alb_dns_name.value' ../tf_outputs_backend.json)" -var="environment=dev" -var="enable_cloudfront=false"
          terraform output -json > tf_outputs.json
        working-directory: ./terraform/frontend

      # Get Outputs
      - name: Get Outputs
        id: outputs
        run: |
          echo "s3_bucket_name=$(jq -r '.s3_bucket_name.value' ./terraform/frontend/tf_outputs.json)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(jq -r '.cloudfront_distribution_id.value' ./terraform/frontend/tf_outputs.json)" >> $GITHUB_OUTPUT

      # Build and Deploy Frontend
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      - run: npm ci
        working-directory: ./client
      - run: npm run build
        working-directory: ./client
      - name: Deploy to S3
        run: aws s3 sync ./client/dist "s3://${{ steps.outputs.outputs.s3_bucket_name }}" --delete
      - name: Invalidate CloudFront
        run: aws cloudfront create-invalidation --distribution-id "${{ steps.outputs.outputs.cloudfront_distribution_id }}" --paths "/*"

      # Build and Deploy Backend
      - uses: aws-actions/amazon-ecr-login@v2
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: 258632448142.dkr.ecr.ap-northeast-1.amazonaws.com/nestjs-hannibal-3:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Update ECS Service
        run: |
          TASK_DEF=$(aws ecs describe-services --cluster nestjs-hannibal-3-cluster --services nestjs-hannibal-3-api-service --query "services[0].taskDefinition" --output text)
          aws ecs describe-task-definition --task-definition $TASK_DEF > task-def.json
          NEW_IMAGE="258632448142.dkr.ecr.ap-northeast-1.amazonaws.com/nestjs-hannibal-3:${{ github.sha }}"
          jq --arg IMAGE "$NEW_IMAGE" '(.taskDefinition.containerDefinitions[] | select(.name == "nestjs-hannibal-3-container") | .image) |= $IMAGE | .taskDefinition | {family,taskRoleArn,executionRoleArn,networkMode,containerDefinitions,volumes,placementConstraints,requiresCompatibilities,cpu,memory,tags,runtimePlatform} | with_entries(select(.value != null))' task-def.json > new-task-def.json
          NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
          aws ecs update-service --cluster nestjs-hannibal-3-cluster --service nestjs-hannibal-3-api-service --task-definition $NEW_TASK_DEF
          aws ecs wait services-stable --cluster nestjs-hannibal-3-cluster --services nestjs-hannibal-3-api-service