name: Destroy AWS Infrastructure (Fast)

env:
  AWS_ACCOUNT_ID: "258632448142"
  PROJECT_NAME: "nestjs-hannibal-3"
  AWS_REGION: "ap-northeast-1"

# 本番用設定（コメントアウト）
# on:
#   workflow_dispatch:
#     inputs:
#       environment:
#         type: choice
#         options: [frontend, backend, all]
#       confirm:
#         description: 'Type "DESTROY" to confirm'
#       double_confirm:
#         description: 'Type project name to double confirm'

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string

jobs:
  destroy:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'DESTROY'
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.1

      # Assume CICD Role
      - name: Assume CICD Role
        run: |
          CREDS=$(aws sts assume-role --role-arn arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/HannibalCICDRole-Dev --role-session-name destroy)
          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      # Destroy Frontend First (CloudFront dependency)
      - name: Destroy Frontend
        run: |
          terraform init -input=false
          terraform destroy -auto-approve -var="api_alb_dns_name=dummy.elb.amazonaws.com" -var="environment=dev" -var="enable_cloudfront=true"
          # 本番用: -var="environment=prod" -var="enable_cloudfront=true"
        working-directory: ./terraform/frontend

      # Stop CodeDeploy Deployments and Clean Resources
      - name: Stop Active Deployments
        run: |
          # 進行中のデプロイメントを停止
          DEPLOYMENTS=$(aws deploy list-deployments --application-name ${{ env.PROJECT_NAME }}-app --include-only-statuses InProgress Queued Ready 2>/dev/null || echo '{"deployments":[]}') 
          for deployment_id in $(echo $DEPLOYMENTS | jq -r '.deployments[]?'); do
            echo "Stopping deployment: $deployment_id"
            aws deploy stop-deployment --deployment-id $deployment_id --auto-rollback-enabled || true
          done
          
          # ECSサービスを停止してTarget Groupから切り離し
          aws ecs update-service --cluster ${{ env.PROJECT_NAME }}-cluster --service ${{ env.PROJECT_NAME }}-api-service --desired-count 0 || true
          sleep 30
        continue-on-error: true

      # Clean Listener Rules and Target Groups
      - name: Clean ALB Dependencies
        run: |
          # ALB ARN取得
          ALB_ARN=$(aws elbv2 describe-load-balancers --names ${{ env.PROJECT_NAME }}-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text 2>/dev/null || echo "None")
          if [ "$ALB_ARN" != "None" ]; then
            # Listener削除
            aws elbv2 describe-listeners --load-balancer-arn $ALB_ARN --query 'Listeners[*].ListenerArn' --output text | xargs -n1 aws elbv2 delete-listener --listener-arn || true
            # ALB削除
            aws elbv2 delete-load-balancer --load-balancer-arn $ALB_ARN || true
            sleep 30
          fi
          
          # Target Group削除
          for tg_name in "${{ env.PROJECT_NAME }}-blue-tg" "${{ env.PROJECT_NAME }}-green-tg"; do
            TG_ARN=$(aws elbv2 describe-target-groups --names $tg_name --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null || echo "None")
            if [ "$TG_ARN" != "None" ]; then
              echo "Deleting Target Group: $tg_name"
              aws elbv2 delete-target-group --target-group-arn $TG_ARN || true
            fi
          done
        continue-on-error: true

      # Clean S3 CodeDeploy Artifacts
      - name: Empty S3 Buckets
        run: |
          # CodeDeploy artifacts bucket
          aws s3 rm s3://${{ env.PROJECT_NAME }}-codedeploy-artifacts --recursive || true
          # Frontend S3 bucket (if exists)
          FRONTEND_BUCKET=$(aws s3api list-buckets --query "Buckets[?contains(Name, '${{ env.PROJECT_NAME }}-frontend')].Name" --output text 2>/dev/null || echo "")
          if [ ! -z "$FRONTEND_BUCKET" ]; then
            aws s3 rm s3://$FRONTEND_BUCKET --recursive || true
          fi
        continue-on-error: true

      # Clean ECR Images
      - name: Clean ECR Repository
        run: |
          aws ecr batch-delete-image --repository-name ${{ env.PROJECT_NAME }} --image-ids imageTag=latest || true
          aws ecr list-images --repository-name ${{ env.PROJECT_NAME }} --query 'imageIds[*]' --output json | \
            jq '.[] | select(.imageTag != null)' | \
            jq -s '.' | \
            aws ecr batch-delete-image --repository-name ${{ env.PROJECT_NAME }} --image-ids file:///dev/stdin || true
        continue-on-error: true

      # Destroy Backend (Complete Infrastructure)
      - name: Destroy Backend
        run: |
          terraform init -input=false
          terraform destroy -auto-approve -var="client_url_for_cors=" -var="environment=dev"
        working-directory: ./terraform/backend
