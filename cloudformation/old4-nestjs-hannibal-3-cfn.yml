# C:\code\javascript\nestjs-hannibal-3\cloudformation\nestjs-hannibal-3-cfn.yml

AWSTemplateFormatVersion: '2010-09-09'
Description: nestjs-hannibal-3本番環境（EC2/Docker/SSM/ECR）

Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2インスタンスのタイプ

  # 最新のAmazon Linux 2023 AMIを自動取得
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
    Description: Amazon Linux 2023の最新AMI ID

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2インスタンスに割り当てるキーペア名

Resources:
  # --- IAM Role and Instance Profile for EC2 ---
  HannibalEC2Role: # IAMロールの論理名
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: # このロールを誰が引き受けて(assume)よいか
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: # 主体を決める
              Service: [ec2.amazonaws.com] # EC2がこのロールを引き受けることを許可している
            Action: ['sts:AssumeRole'] # sts: AWS Security Token Service 略称です
      Path: /
      ManagedPolicyArns: # ARN: Amazon Resource Name
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly  # ECRイメージ取得権限 (Credential Helperが認証情報を取得するために必要)
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess # パラメータストア参照権限 (AMI ID取得に使用)

  HannibalEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile # EC2インスタンスにロールを紐付けるために必要
    Properties:
      Roles: [!Ref HannibalEC2Role]
      # !RefはCloudFormationテンプレート内での論理名（リソース名）から、実際のリソース名やID（物理ID）を取得するための関数です

  # --- Security Group ---
  HannibalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP 4000 and SSH 22
      SecurityGroupIngress:
        # アプリケーションポート (4000) へのインバウンド通信を許可
        - IpProtocol: tcp
          FromPort: 4000 # 許可するポートの開始範囲
          ToPort: 4000 # 許可するポートの終了範囲
          CidrIp: 0.0.0.0/0 # TODO: セキュリティ上はアクセス元IPを限定することを強く推奨
        # SSHポート (22) へのインバウンド通信を許可
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 # TODO: セキュリティ上はご自身のグローバルIPに限定することを強く推奨

  # --- EC2 Instance ---
  HannibalEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType # Parametersで指定したInstanceType
      ImageId: !Ref LatestAmiId # Amazon Linux 2023の最新AMI IDを自動取得
      IamInstanceProfile: !Ref HannibalEC2InstanceProfile # 作成したインスタンスプロファイルをアタッチ
      SecurityGroupIds: [!Ref HannibalSecurityGroup] # 作成したセキュリティグループを適用
      KeyName: hannibal-key # SSH接続用キーペア名

      # --- User Data (Cloud-init Script) ---
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Cloud-init script to install Docker, Docker Compose, configure ECR Credential Helper,
          # create docker-compose.yml, and start the application.

          set -eux # コマンド実行時のエラーで即時終了

          echo "--- Installing Docker ---"
          dnf update -y
          dnf install -y docker
          systemctl enable --now docker # Dockerサービスを有効化し、今すぐ起動
          usermod -aG docker ec2-user # ec2-user を docker グループに追加
          echo "Docker installed and started."

          echo "--- Installing Docker Compose ---"
          # Docker Compose v2 を /usr/local/bin にダウンロード
          # $(uname -s) と $(uname -m) でOSとアーキテクチャを自動判定
          curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose # 実行権限を付与
          # シンボリックリンクを作成して docker-compose コマンドを使えるようにする
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          echo "Docker Compose installed."

          echo "--- Configuring ECR Credential Helper for ec2-user ---"
          # ECR Credential Helper を ec2-user が使えるように設定します。
          # Amazon Linux 2023 では AWS CLI v2 に Credential Helper が含まれているため、別途インストールコマンドは不要なことが多いです。

          DEST_DIR="/home/ec2-user"
          DOCKER_CONFIG_DIR="$DEST_DIR/.docker"
          DOCKER_CONFIG_FILE="$DOCKER_CONFIG_DIR/config.json"

          mkdir -p "$DOCKER_CONFIG_DIR" # ec2-user の Docker 設定ディレクトリを作成
          chown ec2-user:ec2-user "$DOCKER_CONFIG_DIR" # オーナーを ec2-user に変更

          # Docker config.json ファイルを作成または更新し、Credential Helper を設定
          # ヒアドキュメントを使用してファイル内容を記述します。
          # "credHelpers" セクションに、お客様のECRドメインと "ecr-credential-helper" を指定します。
          # 258632448142.dkr.ecr.ap-northeast-1.amazonaws.com はお客様のECRドメインに修正してください。
          # auths: {} を含めるのは、cloud-initがrootでdocker loginしている場合に影響を受けにくくするためです。
          # credential helper が設定されていれば、通常 auths の情報より優先されます。
          sudo -u ec2-user cat <<EOF_DOCKER_CONFIG > "$DOCKER_CONFIG_FILE"
          {
              "credHelpers": {
                  "public.ecr.aws": "ecr-credential-helper",
                  "258632448142.dkr.ecr.ap-northeast-1.amazonaws.com": "ecr-credential-helper"
              },
              "auths": {}
          }
          EOF_DOCKER_CONFIG
          chown ec2-user:ec2-user "$DOCKER_CONFIG_FILE" # ファイルのオーナーを ec2-user に変更
          echo "ECR Credential Helper configured for ec2-user."

          echo "--- Creating docker-compose.yml file ---"
          # /home/ec2-user/ ディレクトリに docker-compose.yml ファイルを作成します。
          # ヒアドキュメントを使用してファイル内容を記述します。

          COMPOSE_FILE="$DEST_DIR/docker-compose.yml"

          # docker-compose.yml の内容を記述
          # TODO: 以下の内容を、お客様の実際の docker-compose.yml の内容に修正してください。
          # 特に image の行は、お客様のECRイメージURI全体に修正が必要です。
          # ポートも、セキュリティグループで4000を開放しているので、ここでは "4000:3000" としています
          # (NestJSアプリがコンテナ内で3000番ポートでListenしていると仮定)。
          # 環境変数も必要に応じて追加してください。
          sudo -u ec2-user cat <<EOF_COMPOSE > "$COMPOSE_FILE"
          version: '3.8'
          services:
            nestjs-app:
              # TODO: お客様のECRイメージURI全体に修正
              image: 258632448142.dkr.ecr.ap-northeast-1.amazonaws.com/nestjs-hannibal-3:latest
              ports:
                # ホストポート:コンテナポート。SGで4000開放に合わせています
                - "4000:4000" # TODO: ポートを必要に応じて調整してください
              environment:
                NODE_ENV: production
                # アプリケーションが必要とする環境変数をここに追加/修正してください
                # 例:
                # DATABASE_URL: postgres://user:password@host:port/database
                # API_KEY: your_secret_api_key
              restart: always # コンテナが終了した場合に常に再起動するように設定
          EOF_COMPOSE
          chown ec2-user:ec2-user "$COMPOSE_FILE" # ファイルのオーナーを ec2-user に変更
          echo "docker-compose.yml created."

          echo "--- Starting application with Docker Compose ---"
          # /home/ec2-user/ ディレクトリに移動し、docker-compose up を実行します。
          # Credential Helper が設定されているため、ec2-user として実行しても ECR からイメージをプルできます。
          cd "$DEST_DIR"

          # docker-compose up をバックグラウンドモード (-d) で実行
          # ec2-user として実行します
          sudo -u ec2-user docker-compose up -d
          if [ $? -eq 0 ]; then
              echo "Docker Compose application started successfully."
          else
              echo "Error: Failed to start Docker Compose application."
              # エラー時は cloud-init ログに詳細が出力されます
              # docker-compose logs コマンドなどで原因を調査してください
              exit 1 # スクリプトを異常終了させる
          fi

          echo "Cloud-init script finished successfully."


Outputs:
  EC2PublicIP:
    Description: "EC2 Public IP"
    Value: !GetAtt HannibalEC2Instance.PublicIp
    # GetAtt: Get Attribute