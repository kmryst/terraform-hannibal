AWSTemplateFormatVersion: '2010-09-09'
Description: nestjs-hannibal-3本番環境（EC2/Docker/SSM/ECR/PM2/Nginx）

Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2インスタンスのタイプ

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
    Description: Amazon Linux 2023の最新AMI ID

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2インスタンスに割り当てるキーペア名

Resources:
  HannibalEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess

  HannibalEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref HannibalEC2Role]

  HannibalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP 80 and SSH 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  HannibalEC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      LastUpdated: "2025-05-12"
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref HannibalEC2InstanceProfile
      SecurityGroupIds: [!Ref HannibalSecurityGroup]
      KeyName: !Ref KeyName

      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          set -eux

          echo "--- Installing Docker ---"
          dnf update -y
          dnf install -y docker
          systemctl enable --now docker
          usermod -aG docker ec2-user
          echo "Docker installed and started."

          echo "--- Installing Amazon ECR Credential Helper ---"
          dnf install -y amazon-ecr-credential-helper
          echo "ECR Credential Helper installed."

          echo "--- Installing Docker Compose ---"
          curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          echo "Docker Compose installed."

          echo "--- Configuring ECR Credential Helper for ec2-user ---"
          DEST_DIR="/home/ec2-user"
          DOCKER_CONFIG_DIR="$DEST_DIR/.docker"
          DOCKER_CONFIG_FILE="$DOCKER_CONFIG_DIR/config.json"

          mkdir -p "$DOCKER_CONFIG_DIR"
          chown ec2-user:ec2-user "$DOCKER_CONFIG_DIR"

          sudo -u ec2-user cat <<EOF_DOCKER_CONFIG > "$DOCKER_CONFIG_FILE"
          {
              "credHelpers": {
                  "public.ecr.aws": "ecr-login",
                  "258632448142.dkr.ecr.ap-northeast-1.amazonaws.com": "ecr-login"
              },
              "auths": {}
          }
          EOF_DOCKER_CONFIG

          chown ec2-user:ec2-user "$DOCKER_CONFIG_FILE"
          echo "ECR Credential Helper configured for ec2-user."

          echo "--- Creating nginx config directory and file ---"
          NGINX_DIR="$DEST_DIR/nginx"
          mkdir -p "$NGINX_DIR"
          chown ec2-user:ec2-user "$NGINX_DIR"

          sudo -u ec2-user cat <<EOF_NGINX > "$NGINX_DIR/nginx.conf"
          events {}

          http {
            server {
              listen 80;
              server_name _;

              location / {
                proxy_pass http://nestjs-app:3000;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
              }
            }
          }
          EOF_NGINX

          chown ec2-user:ec2-user "$NGINX_DIR/nginx.conf"

          echo "--- Creating docker-compose.yml file ---"
          COMPOSE_FILE="$DEST_DIR/docker-compose.yml"

          sudo -u ec2-user cat <<EOF_COMPOSE > "$COMPOSE_FILE"
          services:
            nestjs-app:
              image: 258632448142.dkr.ecr.ap-northeast-1.amazonaws.com/nestjs-hannibal-3:latest
              expose:
                - "3000"
              environment:
                NODE_ENV: production
              restart: always

            nginx:
              image: nginx:1.25-alpine
              ports:
                - "80:80"
              depends_on:
                - nestjs-app
              volumes:
                - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
              restart: always
          EOF_COMPOSE

          chown ec2-user:ec2-user "$COMPOSE_FILE"
          echo "docker-compose.yml created."

          echo "--- Starting application with Docker Compose ---"
          cd "$DEST_DIR"

          echo "Waiting for IAM role propagation..."
          sleep 20

          sudo -u ec2-user docker-compose pull
          sudo -u ec2-user docker-compose up -d --force-recreate

          if [ $? -eq 0 ]; then
              echo "Docker Compose application started successfully."
          else
              echo "Error: Failed to start Docker Compose application."
              exit 1
          fi

          echo "Cloud-init script finished successfully."

Outputs:
  EC2PublicIP:
    Description: "EC2 Public IP"
    Value: !GetAtt HannibalEC2Instance.PublicIp
