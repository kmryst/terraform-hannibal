"AWSTemplateFormatVersion: '2010-09-09'\nDescription: nestjs-hannibal-3?????EC2/Docker/SSM/ECR?\n\nParameters:\n  InstanceType:\n    Type: String\n    Default: t3.micro\n    Description: EC2??????????\n\n  # ???Amazon Linux 2023 AMI?????\n  LatestAmiId:\n    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'\n    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'\n    Description: Amazon Linux 2023???AMI ID\n\n  KeyName:\n    Type: AWS::EC2::KeyPair::KeyName\n    Description: EC2?????????????????\n\nResources:\n  # --- IAM Role and Instance Profile for EC2 ---\n  # EC2???????ECR??????????SSM???????????????????IAM???\n  HannibalEC2Role: # IAM???????\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument: # ?????????????(assume)???\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: [ec2.amazonaws.com]\n            Action: ['sts:AssumeRole']\n      Path: /\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess\n\n  HannibalEC2InstanceProfile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n      Roles: [!Ref HannibalEC2Role]\n\n  # --- Security Group ---\n  HannibalSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Allow HTTP 4000 and SSH 22\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 3000\n          ToPort: 3000\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 22\n          ToPort: 22\n          CidrIp: 0.0.0.0/0\n\n  # --- EC2 Instance ---\n  HannibalEC2Instance:\n    Type: AWS::EC2::Instance\n    Metadata:\n      LastUpdated: \"2025-05-09-a\"\n    Properties:\n      InstanceType: !Ref InstanceType\n      ImageId: !Ref LatestAmiId\n      IamInstanceProfile: !Ref HannibalEC2InstanceProfile\n      SecurityGroupIds: [!Ref HannibalSecurityGroup]\n      KeyName: !Ref KeyName\n\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash\n\n          set -eux\n      \n          echo \"--- Installing Docker ---\"\n          dnf update -y\n          dnf install -y docker\n          systemctl enable --now docker\n          usermod -aG docker ec2-user\n          echo \"Docker installed and started.\"\n      \n          echo \"--- Installing Amazon ECR Credential Helper ---\"\n          dnf install -y amazon-ecr-credential-helper\n          echo \"ECR Credential Helper installed.\"\n      \n          echo \"--- Installing Docker Compose ---\"\n          curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\n          chmod +x /usr/local/bin/docker-compose\n          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n          echo \"Docker Compose installed.\"\n      \n          echo \"--- Configuring ECR Credential Helper for ec2-user ---\"\n          DEST_DIR=\"/home/ec2-user\"\n          DOCKER_CONFIG_DIR=\"$DEST_DIR/.docker\"\n          DOCKER_CONFIG_FILE=\"$DOCKER_CONFIG_DIR/config.json\"\n      \n          mkdir -p \"$DOCKER_CONFIG_DIR\"\n          chown ec2-user:ec2-user \"$DOCKER_CONFIG_DIR\"\n      \n          sudo -u ec2-user cat <<EOF_DOCKER_CONFIG > \"$DOCKER_CONFIG_FILE\"\n          {\n              \"credHelpers\": {\n                  \"public.ecr.aws\": \"ecr-login\",\n                  \"258632448142.dkr.ecr.ap-northeast-1.amazonaws.com\": \"ecr-login\"\n              },\n              \"auths\": {}\n          }\n          EOF_DOCKER_CONFIG\n      \n          chown ec2-user:ec2-user \"$DOCKER_CONFIG_FILE\"\n          echo \"ECR Credential Helper configured for ec2-user.\"\n      \n          # ????????????????????\n      \n          echo \"--- Creating docker-compose.yml file ---\"\n          COMPOSE_FILE=\"$DEST_DIR/docker-compose.yml\"\n      \n          sudo -u ec2-user cat <<EOF_COMPOSE > \"$COMPOSE_FILE\"\n          services:\n            nestjs-app:\n              image: 258632448142.dkr.ecr.ap-northeast-1.amazonaws.com/nestjs-hannibal-3:latest\n              ports:\n                - \"3000:3000\"\n              environment:\n                NODE_ENV: production\n              restart: always\n          EOF_COMPOSE\n      \n          chown ec2-user:ec2-user \"$COMPOSE_FILE\"\n          echo \"docker-compose.yml created.\"\n      \n          echo \"--- Starting application with Docker Compose ---\"\n          cd \"$DEST_DIR\"\n          \n          echo \"Waiting for IAM role propagation...\"\n          sleep 20\n          \n          sudo -u ec2-user docker-compose pull\n          sudo -u ec2-user docker-compose up -d --force-recreate\n          \n          if [ $? -eq 0 ]; then\n              echo \"Docker Compose application started successfully.\"\n          else\n              echo \"Error: Failed to start Docker Compose application.\"\n              exit 1\n          fi\n      \n          echo \"Cloud-init script finished successfully.\"\n      \n\n\nOutputs:\n  EC2PublicIP:\n    Description: \"EC2 Public IP\"\n    Value: !GetAtt HannibalEC2Instance.PublicIp\n\n"
