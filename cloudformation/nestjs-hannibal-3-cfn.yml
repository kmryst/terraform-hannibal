AWSTemplateFormatVersion: '2010-09-09'
Description: nestjs-hannibal-3本番環境（EC2/Docker/SSM/ECR）

Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    Description: t3.microは、低コストでバースト可能な性能を持つ、AWS EC2の汎用インスタンスタイプのひとつです。主に小規模なシステムや開発用途で使われます

Resources:
  HannibalEC2Role: # IAMロールの論理名です、自分で名前つける
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: # このロールを誰が引き受けて(assume)よいか
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: # 主体を決める
              Service: [ec2.amazonaws.com] # EC2がこのロールを引き受けることを許可している
            Action: ['sts:AssumeRole'] # sts: AWS Security Token Service 略称です
      Path: /
      ManagedPolicyArns: # ARN: Amazon Resource Name
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly  # ECRイメージ取得権限
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess # パラメータストア参照権限

  HannibalEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile # EC2インスタンスにロールを紐付けるために必要。プロファイルなしではインスタンスがロールを使用できません
    Properties:
      Roles: [!Ref HannibalEC2Role]
      # !RefはCloudFormationテンプレート内での論理名（リソース名）から、実際のリソース名やID（物理ID）を取得するための関数です

  HannibalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP 4000 from anywhere
      SecurityGroupIngress:
      # 「インバウンドルール」（外部からの接続を許可するルール）を定義するセクションです。この行がないと、一切の外部通信がブロックされます（デフォルトですべて拒否）
        - IpProtocol: tcp
        # TCPはWebサーバー（HTTP/HTTPS）やデータベース接続など、信頼性の高い通信に使われる。「udp」にすると動画ストリーミングなどに使われる
          FromPort: 4000 # 許可するポートの開始範囲
          ToPort: 4000 # 許可するポートの終了範囲
          CidrIp: 0.0.0.0/0
          # CIDR(サイダー): 「Classless Inter-Domain Routing」 IPaddressの範囲の表現法

  HannibalEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType # Parametersで指定したInstanceType
      ImageId: ami-05206bf8aecfc7ae6 # Amazon Linux 2023の最新AMI IDに置換
      IamInstanceProfile: !Ref HannibalEC2InstanceProfile
      SecurityGroupIds: [!Ref HannibalSecurityGroup]
      KeyName: hannibal-key  # SSH接続用 wslにある鍵を確認する
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          amazon-linux-extras install docker -y
          systemctl enable docker
          systemctl start docker
          usermod -aG docker ec2-user

          # Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          # SSM Agent（Amazon Linux 2023はデフォルトでインストール済み）
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent

          # ECRログイン
          aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin <account-id>.dkr.ecr.ap-northeast-1.amazonaws.com

          # Parameter Storeから環境変数取得
          aws ssm get-parameters-by-path --path "/nestjs-hannibal-3/" --region ap-northeast-1 --query "Parameters[*].[Name,Value]" --output text | while read name value; do
            export $(basename $name)="$value"
            echo "$(basename $name)=$value" >> /home/ec2-user/.env
          done

          # Docker Composeファイル作成
          cat <<EOF > /home/ec2-user/docker-compose.yml
          version: "3"
          services:
            app:
              image: <account-id>.dkr.ecr.ap-northeast-1.amazonaws.com/nestjs-hannibal-3:latest
              env_file:
                - /home/ec2-user/.env
              ports:
                - "4000:4000"
              restart: always
          EOF

          # アプリ起動
          docker-compose -f /home/ec2-user/docker-compose.yml up -d

Outputs:
  EC2PublicIP:
    Description: "EC2 Public IP"
    Value: !GetAtt HannibalEC2Instance.PublicIp
